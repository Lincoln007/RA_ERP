//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace RASolarAMS.Model
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Objects;
    using System.Data.Objects.DataClasses;
    using System.Linq;
    
    public partial class RASolarAMSEntities : DbContext
    {
        public RASolarAMSEntities()
            : base("name=RASolarAMSEntities")
        {
            this.Configuration.LazyLoadingEnabled = false;
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public DbSet<Acc_ChartOfAccounts> Acc_ChartOfAccounts { get; set; }
        public DbSet<Acc_FinalTransDetail> Acc_FinalTransDetail { get; set; }
        public DbSet<Acc_FinalTransMaster> Acc_FinalTransMaster { get; set; }
        public DbSet<Acc_FiscalYearInfo> Acc_FiscalYearInfo { get; set; }
        public DbSet<Acc_LocationWiseDailySummary> Acc_LocationWiseDailySummary { get; set; }
        public DbSet<Acc_PrePostTransDetail> Acc_PrePostTransDetail { get; set; }
        public DbSet<Acc_PrePostTransMaster> Acc_PrePostTransMaster { get; set; }
        public DbSet<Acc_SpecialAccount> Acc_SpecialAccount { get; set; }
        public DbSet<Aud_AuditAdjustmentRelatedAccountingTransaction> Aud_AuditAdjustmentRelatedAccountingTransaction { get; set; }
        public DbSet<Common_BankInfo> Common_BankInfo { get; set; }
        public DbSet<Common_LocationWiseBankAccountInfo> Common_LocationWiseBankAccountInfo { get; set; }
        public DbSet<Common_ProjectInfo> Common_ProjectInfo { get; set; }
        public DbSet<Common_BankAccountType> Common_BankAccountType { get; set; }
        public DbSet<Common_BankBranchInfo> Common_BankBranchInfo { get; set; }
        public DbSet<Acc_PrePostTransDetailByDimension> Acc_PrePostTransDetailByDimension { get; set; }
        public DbSet<Acc_TransNoCount> Acc_TransNoCount { get; set; }
        public DbSet<Hrm_SalaryPayRegisterByMonthNEmployee> Hrm_SalaryPayRegisterByMonthNEmployee { get; set; }
        public DbSet<Acc_GLAccountVsDimension> Acc_GLAccountVsDimension { get; set; }
        public DbSet<Acc_MonthlyCashReceiptPaymentTransaction> Acc_MonthlyCashReceiptPaymentTransaction { get; set; }
    
        public virtual ObjectResult<AccGetMonthlyExpensesInDetail> AccGetMonthlyExpensesInDetail(string prmLocationCode, string prmProjectCode)
        {
            var prmLocationCodeParameter = prmLocationCode != null ?
                new ObjectParameter("prmLocationCode", prmLocationCode) :
                new ObjectParameter("prmLocationCode", typeof(string));
    
            var prmProjectCodeParameter = prmProjectCode != null ?
                new ObjectParameter("prmProjectCode", prmProjectCode) :
                new ObjectParameter("prmProjectCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<AccGetMonthlyExpensesInDetail>("AccGetMonthlyExpensesInDetail", prmLocationCodeParameter, prmProjectCodeParameter);
        }
    
        public virtual ObjectResult<AccIncomeStatementForMonthlyMIS> AccIncomeStatementForMonthlyMIS(string prmFromDate, string prmToDate)
        {
            var prmFromDateParameter = prmFromDate != null ?
                new ObjectParameter("prmFromDate", prmFromDate) :
                new ObjectParameter("prmFromDate", typeof(string));
    
            var prmToDateParameter = prmToDate != null ?
                new ObjectParameter("prmToDate", prmToDate) :
                new ObjectParameter("prmToDate", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<AccIncomeStatementForMonthlyMIS>("AccIncomeStatementForMonthlyMIS", prmFromDateParameter, prmToDateParameter);
        }
    
        public virtual ObjectResult<AccountBalanceSheet> AccountBalanceSheet(Nullable<byte> prmChartNo, string prmReportID, Nullable<byte> prmReportSetNo, Nullable<System.DateTime> prmAsOnDate, string prmProjectCode)
        {
            var prmChartNoParameter = prmChartNo.HasValue ?
                new ObjectParameter("prmChartNo", prmChartNo) :
                new ObjectParameter("prmChartNo", typeof(byte));
    
            var prmReportIDParameter = prmReportID != null ?
                new ObjectParameter("prmReportID", prmReportID) :
                new ObjectParameter("prmReportID", typeof(string));
    
            var prmReportSetNoParameter = prmReportSetNo.HasValue ?
                new ObjectParameter("prmReportSetNo", prmReportSetNo) :
                new ObjectParameter("prmReportSetNo", typeof(byte));
    
            var prmAsOnDateParameter = prmAsOnDate.HasValue ?
                new ObjectParameter("prmAsOnDate", prmAsOnDate) :
                new ObjectParameter("prmAsOnDate", typeof(System.DateTime));
    
            var prmProjectCodeParameter = prmProjectCode != null ?
                new ObjectParameter("prmProjectCode", prmProjectCode) :
                new ObjectParameter("prmProjectCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<AccountBalanceSheet>("AccountBalanceSheet", prmChartNoParameter, prmReportIDParameter, prmReportSetNoParameter, prmAsOnDateParameter, prmProjectCodeParameter);
        }
    
        public virtual ObjectResult<AccountingDataEntryStatus> AccountingDataEntryStatus(string prmReportType, string prmLocationCode, string prmYearMonth)
        {
            var prmReportTypeParameter = prmReportType != null ?
                new ObjectParameter("prmReportType", prmReportType) :
                new ObjectParameter("prmReportType", typeof(string));
    
            var prmLocationCodeParameter = prmLocationCode != null ?
                new ObjectParameter("prmLocationCode", prmLocationCode) :
                new ObjectParameter("prmLocationCode", typeof(string));
    
            var prmYearMonthParameter = prmYearMonth != null ?
                new ObjectParameter("prmYearMonth", prmYearMonth) :
                new ObjectParameter("prmYearMonth", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<AccountingDataEntryStatus>("AccountingDataEntryStatus", prmReportTypeParameter, prmLocationCodeParameter, prmYearMonthParameter);
        }
    
        public virtual ObjectResult<AccShowAccountWiseBreakdown> AccShowAccountWiseBreakdown(string prmLocationCode, string prmYearMonth, string prmTransType)
        {
            var prmLocationCodeParameter = prmLocationCode != null ?
                new ObjectParameter("prmLocationCode", prmLocationCode) :
                new ObjectParameter("prmLocationCode", typeof(string));
    
            var prmYearMonthParameter = prmYearMonth != null ?
                new ObjectParameter("prmYearMonth", prmYearMonth) :
                new ObjectParameter("prmYearMonth", typeof(string));
    
            var prmTransTypeParameter = prmTransType != null ?
                new ObjectParameter("prmTransType", prmTransType) :
                new ObjectParameter("prmTransType", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<AccShowAccountWiseBreakdown>("AccShowAccountWiseBreakdown", prmLocationCodeParameter, prmYearMonthParameter, prmTransTypeParameter);
        }
    
        public virtual ObjectResult<AccTrialBalanceInDetailByAccount> AccTrialBalanceInDetailByAccount(Nullable<System.DateTime> prmFromDate, Nullable<System.DateTime> prmToDate, string prmProjectCode, string prmAccountNo)
        {
            var prmFromDateParameter = prmFromDate.HasValue ?
                new ObjectParameter("prmFromDate", prmFromDate) :
                new ObjectParameter("prmFromDate", typeof(System.DateTime));
    
            var prmToDateParameter = prmToDate.HasValue ?
                new ObjectParameter("prmToDate", prmToDate) :
                new ObjectParameter("prmToDate", typeof(System.DateTime));
    
            var prmProjectCodeParameter = prmProjectCode != null ?
                new ObjectParameter("prmProjectCode", prmProjectCode) :
                new ObjectParameter("prmProjectCode", typeof(string));
    
            var prmAccountNoParameter = prmAccountNo != null ?
                new ObjectParameter("prmAccountNo", prmAccountNo) :
                new ObjectParameter("prmAccountNo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<AccTrialBalanceInDetailByAccount>("AccTrialBalanceInDetailByAccount", prmFromDateParameter, prmToDateParameter, prmProjectCodeParameter, prmAccountNoParameter);
        }
    
        public virtual ObjectResult<GLAccountLedger> GLAccountLedger(string prmLocationCode, string prmFromDate, string prmToDate, string prmAccountNo, string prmProjectCode)
        {
            var prmLocationCodeParameter = prmLocationCode != null ?
                new ObjectParameter("prmLocationCode", prmLocationCode) :
                new ObjectParameter("prmLocationCode", typeof(string));
    
            var prmFromDateParameter = prmFromDate != null ?
                new ObjectParameter("prmFromDate", prmFromDate) :
                new ObjectParameter("prmFromDate", typeof(string));
    
            var prmToDateParameter = prmToDate != null ?
                new ObjectParameter("prmToDate", prmToDate) :
                new ObjectParameter("prmToDate", typeof(string));
    
            var prmAccountNoParameter = prmAccountNo != null ?
                new ObjectParameter("prmAccountNo", prmAccountNo) :
                new ObjectParameter("prmAccountNo", typeof(string));
    
            var prmProjectCodeParameter = prmProjectCode != null ?
                new ObjectParameter("prmProjectCode", prmProjectCode) :
                new ObjectParameter("prmProjectCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GLAccountLedger>("GLAccountLedger", prmLocationCodeParameter, prmFromDateParameter, prmToDateParameter, prmAccountNoParameter, prmProjectCodeParameter);
        }
    
        public virtual ObjectResult<MonthlyAccountingSummaryStatement> MonthlyAccountingSummaryStatement(string prmLocationCode, string prmFromDate, string prmToDate)
        {
            var prmLocationCodeParameter = prmLocationCode != null ?
                new ObjectParameter("prmLocationCode", prmLocationCode) :
                new ObjectParameter("prmLocationCode", typeof(string));
    
            var prmFromDateParameter = prmFromDate != null ?
                new ObjectParameter("prmFromDate", prmFromDate) :
                new ObjectParameter("prmFromDate", typeof(string));
    
            var prmToDateParameter = prmToDate != null ?
                new ObjectParameter("prmToDate", prmToDate) :
                new ObjectParameter("prmToDate", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<MonthlyAccountingSummaryStatement>("MonthlyAccountingSummaryStatement", prmLocationCodeParameter, prmFromDateParameter, prmToDateParameter);
        }
    
        public virtual ObjectResult<TrialBalance> TrialBalance(string prmReportType, string prmLocationCode, Nullable<System.DateTime> prmFromDate, Nullable<System.DateTime> prmToDate, string prmProjectCode)
        {
            var prmReportTypeParameter = prmReportType != null ?
                new ObjectParameter("prmReportType", prmReportType) :
                new ObjectParameter("prmReportType", typeof(string));
    
            var prmLocationCodeParameter = prmLocationCode != null ?
                new ObjectParameter("prmLocationCode", prmLocationCode) :
                new ObjectParameter("prmLocationCode", typeof(string));
    
            var prmFromDateParameter = prmFromDate.HasValue ?
                new ObjectParameter("prmFromDate", prmFromDate) :
                new ObjectParameter("prmFromDate", typeof(System.DateTime));
    
            var prmToDateParameter = prmToDate.HasValue ?
                new ObjectParameter("prmToDate", prmToDate) :
                new ObjectParameter("prmToDate", typeof(System.DateTime));
    
            var prmProjectCodeParameter = prmProjectCode != null ?
                new ObjectParameter("prmProjectCode", prmProjectCode) :
                new ObjectParameter("prmProjectCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<TrialBalance>("TrialBalance", prmReportTypeParameter, prmLocationCodeParameter, prmFromDateParameter, prmToDateParameter, prmProjectCodeParameter);
        }
    }
}
