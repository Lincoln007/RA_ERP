@using RASolarAMS.Model;
@using RASolarERP.DomainModel.AMSModel;
@model IEnumerable<RASolarAMS.Model.AccountingDataEntryStatus>
@{
    ViewBag.Title = "Accounting Data Entry Status";

    Layout = "~/Areas/Financial/Views/Shared/_AccountingLayout.cshtml";

    if (false)
    {
    <script src="../../../../Scripts/jquery-1.5.1.min.js" type="text/javascript"></script>
    <script src="../../../../Scripts/RASolarCustomFunction.js" type="text/javascript"></script>    
    }
}
@section TopMenu
{
    @Html.Partial((String)ViewBag.TopMenu)
}
@section LoginInfo
{
    <table cellpadding="0" cellspacing="0" border="0" style="text-align: right;" width="100%">
        <tr>
            <td style="width: 20%" align="left">
                @ViewBag.ZoneTitle&nbsp; @ViewBag.ZoneName
            </td>
            <td style="width: 20%" align="left">
                @ViewBag.RegionTitle&nbsp; @ViewBag.RegionName
            </td>
            <td style="width: 20%" align="left">
                @ViewBag.UnitTitle&nbsp; @ViewBag.UnitName
            </td>
            <td style="width: 40%" align="left">
                @ViewBag.OpenMonthYear
            </td>
        </tr>
    </table>
}
<input id="hfIsAuthenticForSave" type="hidden" value="@ViewBag.IsAuthenticForSave" />
<div class="DataGridXScroll">
    @(Html.Telerik().Grid(Model)
                .Name("grvAccountSummary")
                .DataKeys(keys => keys.Add(k => k.Unit_Code))
                .Columns(column =>
                {
                    column.Bound(i => i.Zone_Name).Width(100).Title("Zone Name").HtmlAttributes(new { @class = "GridColumnLeftAlign" }).Hidden(true);
                    column.Bound(i => i.Region_Name).Width(100).Title("Region Name").HtmlAttributes(new { @class = "GridColumnLeftAlign" }).Hidden(true);
                    column.Bound(i => i.Unit_Code).HtmlAttributes(new { @class = "GridColumnLeftAlign" })
                        .Template(@<a href="@(@Url.Action("UnitWiseMonthyAccountSummaryStatement", "AccountingReport") + "?unitCode=")@(item.Unit_Code + "&unitName=" + item.Unit_Name)" target="_blank">@item.Unit_Code</a>);
                    column.Bound(i => i.Unit_Name).Width(100).HtmlAttributes(new { @class = "GridColumnLeftAlign" });
                    column.Bound(i => i.Cash_OpeningBalance).Width(100).HtmlAttributes(new { @class = "GridColumnRightAlign" }).Title("Cash Opening Balance")
                    .Format("{0:0}")
                  .Aggregate(ag => ag.Sum())
                  .FooterTemplate(@<text>@item.Sum.Format("{0:0}")</text>)
                  .GroupFooterTemplate(@<text>@item.Sum.Format("{0:0}")</text>);

                    column.Bound(i => i.Cash_Received).Width(100).HtmlAttributes(new { @class = "GridColumnRightAlign" }).Title("Cash Received")
                        //.Template(@<a href="#" onclick="return LedgerShow('CASHRCV','@item.Unit_Code')">@Convert.ToDecimal(@item.Cash_Received).ToString("0.00")</a>)
                          .Format("{0:0}")
                    .Aggregate(ag => ag.Sum())
                    .FooterTemplate(@<text>@item.Sum.Format("{0:0}")</text>)
                    .GroupFooterTemplate(@<text>@item.Sum.Format("{0:0}")</text>);

                    column.Bound(i => i.Cash_PaymentOrBankDeposit).Width(100).HtmlAttributes(new { @class = "GridColumnRightAlign" }).Title("Cash Payment Or Bank Deposit")
                        //.Template(@<a href="#" onclick="return DetailsBreakDown('CASHPAYBANKDPST', '@item.Unit_Code')">@Convert.ToDecimal(@item.Cash_Received).ToString("0.00")</a>)
                        .Format("{0:0}")
                  .Aggregate(ag => ag.Sum())
                  .FooterTemplate(@<text>@item.Sum.Format("{0:0}")</text>)
                  .GroupFooterTemplate(@<text>@item.Sum.Format("{0:0}")</text>);

                    column.Bound(i => i.Cash_ClosingBalance).Width(100).HtmlAttributes(new { @class = "GridColumnRightAlign" }).Title("Cash Closing Balance")
                        .Format("{0:0}")
          .Aggregate(ag => ag.Sum())
          .FooterTemplate(@<text>@item.Sum.Format("{0:0}")</text>)
          .GroupFooterTemplate(@<text>@item.Sum.Format("{0:0}")</text>);

                    column.Bound(i => i.Bank_OpeningBalance).Width(100).HtmlAttributes(new { @class = "GridColumnRightAlign" }).Title("Bank Opening Balance")
                        .Format("{0:0}")
          .Aggregate(ag => ag.Sum())
          .FooterTemplate(@<text>@item.Sum.Format("{0:0}")</text>)
          .GroupFooterTemplate(@<text>@item.Sum.Format("{0:0}")</text>);

                    column.Bound(i => i.Bank_Deposit).Width(100).HtmlAttributes(new { @class = "GridColumnRightAlign" }).Title("Bank Deposit")
                        .Template(@<a href="@(@Url.Action("GeneralLedgerForSpecificUnit", "AccountingReport") + "?unitCode=")@(item.Unit_Code + "&unitName=" + item.Unit_Name)" target="_blank">@Convert.ToDecimal(@item.Bank_Deposit).ToString("0.")</a>)
                        //.Template(@<a href="#" onclick="return LedgerShow('BANKDPST', '@item.Unit_Code')">@Convert.ToDecimal(@item.Cash_Received).ToString("0.00")</a>)
                        .Format("{0:0}")
          .Aggregate(ag => ag.Sum())
          .FooterTemplate(@<text>@item.Sum.Format("{0:0}")</text>)
          .GroupFooterTemplate(@<text>@item.Sum.Format("{0:0}")</text>);

                    column.Bound(i => i.Bank_TT_DD_Others).Width(100).HtmlAttributes(new { @class = "GridColumnRightAlign" }).Title("Bank TT DD Others")
                        //.Template(@<a href="#" onclick="return DetailsBreakDown('BANKTTDDOTHRS', '@item.Unit_Code')">@Convert.ToDecimal(@item.Bank_TT_DD_Others).ToString("0.00")</a>)
                        .Format("{0:0}")
          .Aggregate(ag => ag.Sum())
          .FooterTemplate(@<text>@item.Sum.Format("{0:0}")</text>)
          .GroupFooterTemplate(@<text>@item.Sum.Format("{0:0}")</text>);

                    column.Bound(i => i.Bank_ClosingBalance).Width(100).HtmlAttributes(new { @class = "GridColumnRightAlign" }).Title("Bank Closing Balance")
                        .Format("{0:0}")
          .Aggregate(ag => ag.Sum())
          .FooterTemplate(@<text>@item.Sum.Format("{0:0}")</text>)
          .GroupFooterTemplate(@<text>@item.Sum.Format("{0:0}")</text>);

                    column.Bound(i => i.CollectionReconciliationBalance).Width(100).HtmlAttributes(new { @class = "GridColumnRightAlign" }).Title("Collection Reconciliation Balance")
                        .Format("{0:0}")
          .Aggregate(ag => ag.Sum())
          .FooterTemplate(@<text>@item.Sum.Format("{0:0}")</text>)
          .GroupFooterTemplate(@<text>@item.Sum.Format("{0:0}")</text>);

                    column.Bound(i => i.NoOfSales_SHS).Width(100).HtmlAttributes(new { @class = "GridColumnRightAlign" }).Title("No Of Sales SHS")
                        .Format("{0:0}")
          .Aggregate(ag => ag.Sum())
          .FooterTemplate(@<text>@item.Sum.Format("{0:0}")</text>)
          .GroupFooterTemplate(@<text>@item.Sum.Format("{0:0}")</text>);

                    column.Bound(i => i.InventoryClosingBalance).Width(100).HtmlAttributes(new { @class = "GridColumnRightAlign" }).Title("Inventory Closing Balance")
                        .Format("{0:0}")
          .Aggregate(ag => ag.Sum())
          .FooterTemplate(@<text>@item.Sum.Format("{0:0}")</text>)
          .GroupFooterTemplate(@<text>@item.Sum.Format("{0:0}")</text>);

                    column.Template(@<a href="#">Show</a>).Width(50);
                    column.Bound(i => i.FinalizedByRM).Format("{0:dd-MMM-yy}").Width(100).HtmlAttributes(new { @class = "GridColumnLeftAlign" });
                    column.Bound(i => i.FinalizedByZM).Format("{0:dd-MMM-yy}").Width(100).HtmlAttributes(new { @class = "GridColumnLeftAlign" });
                    column.Bound(i => i.FinalizedByHO).Format("{0:dd-MMM-yy}").Width(100).HtmlAttributes(new { @class = "GridColumnLeftAlign" });
                    column.Template(@<a href="#" onclick="return SaveAccountEntryStatus('@item.Unit_Code','@item.FinalizedByRM','@item.FinalizedByZM','@item.FinalizedByHO');">Save</a>).Width(50);

                }).Groupable(settings => settings.Groups(groups =>
                {
                    groups.Add(g => g.Zone_Name);
                    groups.Add(g => g.Region_Name);
                }).Visible(false))
                .Selectable()

                .Scrollable(scroll => scroll.Height(250))
        )
</div>
<table cellpadding="0" cellspacing="0" border="0" style="padding: 15px;" width="100%">
    <tr>
        <td valign="top" style="width: 30%;" align="left">
            <table cellpadding="0" cellspacing="0" border="0" width="100%">
                <tr>
                    <td align="left">
                        Total number of Units:&nbsp;&nbsp;@ViewBag.TotalNumberofUnits
                    </td>
                </tr>
                <tr>
                    <td align="left">
                        Entry finalized by RM:&nbsp;&nbsp;@ViewBag.EntryfinalizedbyRM
                    </td>
                </tr>
                <tr>
                    <td align="left">
                        Entry finalized by ZM:&nbsp;&nbsp;@ViewBag.EntryFinalizedbyZM
                    </td>
                </tr>
                <tr>
                    <td align="left">
                        Entry finalized by HO:&nbsp;&nbsp;@ViewBag.EntryfinalizedbyHO
                    </td>
                </tr>
            </table>
        </td>
    </tr>
    <tr>
        <td style="width: 20%" align="left">
            @ViewBag.UnitTitle&nbsp; @ViewBag.UnitName
        </td>
    </tr>
</table>
<script type="text/javascript">

    function LedgerShow(transType,unitCode) {
        
        //var fromDate = "01-Nov-2012";//$('#txtStartDate').val();
        //var todate ="30-Nov-2012"; //$('#txtEndDate').val();
        
        var projectCode = "100200"; 
       
        var params = {  
            transType: transType, 
            unitCode: unitCode,          
            projectCode: projectCode
        };
       
        var grid = $('#gvGeneralLedger').data('tGrid');
        grid.dataSource._data = [];       
        grid.ajaxRequest(params);
    }
   
    function SaveAccountEntryStatus(unitCode, FinalizedByRM, FinalizedByZM, FinalizedByHO) {

        var locationType = @(Html.Raw(Json.Encode(ViewBag.Location)));

        if($('#hfIsAuthenticForSave').val()=="False")
        {
            alert("You Are Not an Authentic Approver for This Location");
            return false;
        }

        if (locationType == "Region") {

            if (FinalizedByRM != "") {
                alert("You Already Confirm. Cannot Confirm Again.");
                return false;
            }
            else {
                SaveAccountEntryStatusAjax(unitCode);
                return true;
            }
        }
        else if (locationType == "Zone") {

            if (FinalizedByRM == "") {
                alert("Cannot Save before RM Confirm.");
                return false;
            }
            else if (FinalizedByZM != "") {
                alert("You Already Confirm. Cannot Confirm Again.");
                return false;
            }
            else {
                SaveAccountEntryStatusAjax(unitCode);
                return true;
            }
        }
        else if (locationType == "HO") {

            if (FinalizedByRM == "") {
                alert("Cannot Save before RM Confirm.");
                return false;
            }
            else if (FinalizedByZM == "") {
                alert("Cannot Save before ZM Confirm.");
                return false;
            }
            else if (FinalizedByHO != "") {
                alert("You Already Confirm. Cannot Confirm Again.");
                return false;
            }
            else {
                SaveAccountEntryStatusAjax(unitCode);
                return true;
            }
        }
        else {
            return false;
        }

        return false;
    }

    function SaveAccountEntryStatusAjax(unitCode) {

        $.ajax({
            type: "POST",
            url: '@Url.Action("SaveAccountingStatus", "AccountingReport")',
            data: "{'unitCode':'" + unitCode + "'}",
            contentType: "application/json; charset=utf-8",
            dataType: 'json',
            cache: false,
            success: function (data) {

                if (data == "Succeed") {
                    alert("Confirmation is Succeed.");
                }
                else if (data == "NotSucceed")
                { alert("Confirmation is Succeed."); }

            },
            error: function () {
                alert("Failed to load Item");
            }
        });
    }

    function RSFMenu(goFor) {
        window.location.replace(Helper.Menu("../../", goFor));
        return false;
    } 

    
</script>
