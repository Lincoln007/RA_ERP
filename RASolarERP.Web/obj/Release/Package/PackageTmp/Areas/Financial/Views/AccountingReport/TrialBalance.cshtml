<script type="text/javascript">
    var firstTime = true;
    function onDataBinding(e) {
        if (firstTime) {
            e.preventDefault();
            firstTime = false;
        }
    }

    function onError(e) {
        e.preventDefault();
    }

</script>
@using RASolarAMS.Model;
@using RASolarERP.DomainModel.AMSModel;
@{
    ViewBag.Title = "Trial Balance Report";
    Layout = "~/Areas/Financial/Views/Shared/_AccountingLayout.cshtml";

    if (false)
    {
    <script src="../../../../Scripts/jquery-1.5.1.min.js" type="text/javascript"></script>
    <script src="../../../../Scripts/RASolarCustomFunction.js" type="text/javascript"></script>   
    <script src="../../../../Scripts/jquery-ui-1.8.11.min.js" type="text/javascript"></script>
    }    
}
@section TopMenu
{
    @Html.Partial((String)ViewBag.TopMenu)
}
@section LoginInfo
{
    <table cellpadding="0" cellspacing="0" width="100%">
        <tr>
            <td style="width: 20%" align="left">
                @ViewBag.ZoneTitle&nbsp; @ViewBag.ZoneName
            </td>
            <td style="width: 20%" align="left">
                @ViewBag.RegionTitle&nbsp; @ViewBag.RegionName
            </td>
            <td style="width: 20%" align="left">
                @ViewBag.UnitTitle&nbsp; @ViewBag.UnitName
            </td>
            <td style="width: 40%" align="left">
                @ViewBag.OpenMonthYear
            </td>
        </tr>
    </table>
}
<table cellpadding="0" cellspacing="0" width="100%">
    <tr>
        <td align="left" width="25%">Starting Date
        </td>
        <td align="left" width="25%">
            @(Html.Telerik().DatePicker()
            .Name("txtStartDate")
            .Max(new DateTime(2999, 12, 31))
            .Format("dd-MMM-yyyy")
            .Value(ViewBag.FirstDayOfTheMonth)
        )
        </td>
        <td align="left" width="25%">End Date
        </td>
        <td align="left" width="25%">
            @(Html.Telerik().DatePicker()
            .Name("txtEndDate")
            .Max(new DateTime(2999, 12, 31))
            .Format("dd-MMM-yyyy")
            .Value(ViewBag.ToDate)
        )
        </td>
    </tr>
    <tr>
        <td align="left" width="25%">Project
        </td>
        <td align="left" width="25%">@Html.DropDownList("ddlProject", new SelectList((System.Collections.ArrayList)TempData["Projects"], "Value", "Display", "0"))
        </td>
        <td align="left" width="25%">Report Type
        </td>
        <td align="left" width="25%">
            @Html.DropDownList("ddlReportType", new List<SelectListItem> { 
                new SelectListItem{Text ="Individual Location", Value="INDIVIDUALLOCATION", Selected= (bool)ViewBag.DisableReportType},
                new SelectListItem{Text ="Summary Report", Value="SUMMARY"}
       }, "--Select--", ViewBag.DisableReportType ? (object)new { disabled = "disabled" } : new { })
        </td>
    </tr>
    <tr>
        <td align="right" colspan="4">
            <input type="submit" id="btnShowTrialBalance" value="Show Trial Balance" onclick="return ShowTrialBalance();" />
        </td>
    </tr>
</table>
@(Html.Telerik().Grid<TrialBalanceReport>()
    .Name("grvTrialBalance")
    .DataKeys(keys => keys.Add(k => k.AccNo))
    .Columns(column =>
    {
        column.Bound(t => t.AccNo).Width(150).Title("Account No");
        column.Bound(t => t.AccName).Title("Account Name")
        .FooterTemplate(@<b>Total: </b>);

        column.Bound(t => t.OpeningB).Width(100).Title("Opening Balance")
        .FooterTemplate(@<b>@TempData["OpeningBalance"]</b>).Format("{0:0,0}").HtmlAttributes(new { @class = "GridColumnRightAlign" });

        column.Bound(t => t.Debit).Width(100).Title("Dr. Amount")
        .FooterTemplate(@<b>@TempData["Debit"]</b>).Format("{0:0,0}").HtmlAttributes(new { @class = "GridColumnRightAlign" });

        column.Bound(t => t.Credit).Width(100).Title("Cr. Amount").HtmlAttributes(new { @class = "GridColumnRightAlign" })
        .FooterTemplate(@<b>@TempData["Credit"]</b>).Format("{0:0,0}").HtmlAttributes(new { @class = "GridColumnRightAlign" });

        column.Bound(t => t.ClosingB).Width(100).Title("Closing Balance").HtmlAttributes(new { @class = "GridColumnRightAlign" }).Format("{0:0,0}")
        .FooterTemplate(@<b>@TempData["ClosingBalance"]</b>).Hidden(ViewBag.ClosingBlanceUnitHide);

        column.Bound(t => t.ClosingB).Width(100).Title("Closing Balance")
            .ClientTemplate("<a id=\"cb<#=AccNo#>\" style=\"text-align:right; display:block;\" href='#' onclick=\"TrialBalanceBreakDownPage('<#=AccNo#>', '<#=AccName#>')\"><#=ClosingBalanceFormat(ClosingB)#></a>")
            .HtmlAttributes(new { @class = "GridColumnRightAlign" }).Format("{0:0,0}")
        .FooterTemplate(@<b>@TempData["ClosingBalance"]</b>).Hidden(ViewBag.ClosingBlanceHOHide);

    })
        .Footer(true)
        .DataBinding(bindings => bindings.Ajax().Select("_TrialBalanceShow", "AccountingReport"))
        .Selectable()
        .Scrollable(scroll => scroll.Height(350))
        .ClientEvents(events =>
                               events.OnDataBinding("onDataBinding")
                                     .OnError("onError")
                     )

        .ToolBar(commands =>
        {
            commands.Custom().HtmlAttributes(new { id = "exportToPdf", onClick = "return SetParamaterForPdfGeneration();" }).Text("Export To PDF").Action("ExportToPdfTrialBalance", "AccountingReport", new { page = 1, groupby = "~", orderby = "~", filter = "~", reportType = "~", datefrom = "~", dateTo = "~", projectCode = "~" });
            commands.Custom().HtmlAttributes(new { id = "exportToCsv", onClick = "return SetParamaterForCsvGeneration();" }).Text("Export To Excel").Action("ExportToCsvTrialBalance", "AccountingReport", new { page = 1, groupby = "~", orderby = "~", filter = "~", reportType = "~", datefrom = "~", dateTo = "~", projectCode = "~" });
        })
)
<script type="text/javascript">

    function SetParamaterForPdfGeneration() {

        var grid = $("#grvTrialBalance").data("tGrid");
        var $exportToPdf = $('#exportToPdf');
        var href = $exportToPdf.attr("href");

        href = href.replace(/page=([^&]*)/, 'page=' + grid.currentPage);
        href = href.replace(/groupby=([^&]*)/, 'groupby=' + (grid.groupBy || '~'));
        href = href.replace(/orderby=([^&]*)/, 'orderby=' + (grid.orderBy || '~'));
        href = href.replace(/filter=([^&]*)/, 'filter=' + (grid.filterBy || '~'));

        href = href.replace(/reportType=([^&]*)/, 'reportType=' + $('#ddlReportType').val());
        href = href.replace(/datefrom=([^&]*)/, 'datefrom=' + $('#txtStartDate').val());
        href = href.replace(/dateTo=([^&]*)/, 'dateTo=' + $('#txtEndDate').val());
        href = href.replace(/projectCode=([^&]*)/, 'projectCode=' + $('#ddlProject').val());

        $exportToPdf.attr("href", href);

        return true;
    }

    function SetParamaterForCsvGeneration() {

        var grid = $("#grvTrialBalance").data("tGrid");
        var $exportToCsv = $('#exportToCsv');
        var href = $exportToCsv.attr("href");

        href = href.replace(/page=([^&]*)/, 'page=' + grid.currentPage);
        href = href.replace(/groupby=([^&]*)/, 'groupby=' + (grid.groupBy || '~'));
        href = href.replace(/orderby=([^&]*)/, 'groupby=' + (grid.orderBy || '~'));
        href = href.replace(/filter=([^&]*)/, 'filter=' + (grid.filterBy || '~'));

        href = href.replace(/reportType=([^&]*)/, 'reportType=' + $('#ddlReportType').val());
        href = href.replace(/datefrom=([^&]*)/, 'datefrom=' + $('#txtStartDate').val());
        href = href.replace(/dateTo=([^&]*)/, 'dateTo=' + $('#txtEndDate').val());
        href = href.replace(/projectCode=([^&]*)/, 'projectCode=' + $('#ddlProject').val());

        $exportToCsv.attr("href", href);

        return true;
    }

    function ShowTrialBalance() {

        var txtStartDate = $('#txtStartDate').val();
        var txtEndDate = $('#txtEndDate').val();
        var projectCode = $('#ddlProject').val();

        if (txtStartDate == "") {
            alert("Please Give Start Date");
            return false;
        }
        else if (txtEndDate == "") {
            alert("Please Give End Date");
            return false;
        }
        else if (projectCode == "") {
            alert("Please Select Project");
            return false;
        }

        if (!$('#ddlReportType').is(":disabled")) {

            if ($('#ddlReportType').val() == "") {
                alert("Please Select Report Type");
                return false;
            }
        }

        var Params = {
            startDate: txtStartDate,
            endDate: txtEndDate,
            projectCode: projectCode,
            reportType: $('#ddlReportType').val()
        };

        var grid = $('#grvTrialBalance').data('tGrid');
        grid.dataSource._data = [];
        grid.ajaxRequest(Params);


    }

    function TrialBalanceBreakDownPage(acountNumber, accountName) {

        var url = "";

        if ($("#ddlReportType").val() == "INDIVIDUALLOCATION") {
            url = "GeneralLedgerForLoginUnitWithAccountSelection?accnam=" + acountNumber + "&pc=" + $('#ddlProject').val();
        }
        else {
            url = "UnitWiseBreakupAnAccountHead?accn=" + acountNumber + "&accnam=" + accountName + "&sd=" + $('#txtStartDate').val() + "&ed=" + $('#txtEndDate').val() + "&pc=" + $('#ddlProject').val();
        }

        window.open(url, '_blank');
        return false;
    }

    function ClosingBalanceFormat(closingBalance) {
        template = $.telerik.formatString('{0:0,0}', Number(closingBalance));
        return template;
    }

    function RSFMenu(goFor) {
        window.location.replace(Helper.Menu("../../", goFor));
        return false;
    }

</script>
