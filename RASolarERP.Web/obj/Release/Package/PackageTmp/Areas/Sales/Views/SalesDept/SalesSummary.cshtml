@model IEnumerable<RASolarERP.Model.SalesDataEntryStatus>
@{
    if (false)
    {
    <script src="../../../../Scripts/jquery-1.5.1.min.js" type="text/javascript"></script>

    }

    ViewBag.Title = "Sales Data Entry Status";
    

    Layout = "~/Areas/Sales/Views/Shared/_SalesLayout.cshtml";
}
@section TopMenu
{
    @Html.Partial((String)ViewBag.TopMenu)
}
@section LoginInfo
{
    <table cellpadding="0" cellspacing="0" border="0" style="text-align: right;" width="100%">
        <tr>
            <td style="width: 20%" align="left">
                @ViewBag.ZoneTitle&nbsp; @ViewBag.ZoneName
            </td>
            <td style="width: 20%" align="left">
                @ViewBag.RegionTitle&nbsp; @ViewBag.RegionName
            </td>
            <td style="width: 20%" align="left">
                @ViewBag.UnitTitle&nbsp; @ViewBag.UnitName
            </td>
            <td style="width: 40%" align="left">
                @ViewBag.OpenMonthYear
            </td>
        </tr>
    </table>
}
<table cellpadding="0" cellspacing="0" border="0">
    <tr>
        <td colspan="3" align="right">
            Month: @TempData["SalesOpenMonth"].ToString()
        </td>
    </tr>
</table>
<input id="hfIsAuthenticForSave" type="hidden" value="@ViewBag.IsAuthenticForSave" />
<div class="DataGridXScroll">
    @(Html.Telerik().Grid(Model)
    .Name("grvSalesSummary")
    .DataKeys(keys => keys.Add(k => k.Unit_Code))
    .Columns(column =>
    {
        column.Bound(s => s.Zone_Name).Width(100).HtmlAttributes(new { @class = "GridColumnLeftAlign" }).Hidden(true)
             .GroupHeaderTemplate(@<text>Zone: @item.Key</text>);
        column.Bound(s => s.Region_Name).Width(100).HtmlAttributes(new { @class = "GridColumnLeftAlign" }).Hidden(true)
            .GroupHeaderTemplate(@<text>Region: @item.Key</text>);
        column.Bound(s => s.Unit_Code).Width(100).HtmlAttributes(new { @class = "GridColumnLeftAlign" }).Title("Unit Code");
        column.Bound(s => s.Unit_Name).Width(150).HtmlAttributes(new { @class = "GridColumnLeftAlign" }).Title("Unit Name");

        column.Bound(s => s.A_OpeningNoOfActiveCustomer).Width(100).HtmlAttributes(new { @class = "GridColumnRightAlign" }).Title("A. Opening No Of Active Customer")
             .Aggregate(aggreages => aggreages.Sum())
                .Format("{0:0}")
                .FooterTemplate(@<text> @item.Sum.Format("{0:0}") </text>)
               .GroupFooterTemplate(@<text>@item.Sum.Format("{0:0}")</text>);
        //.Width(100)
        //         .FooterTemplate(result => (result.Sum == null ? "0.00" : result.Sum.Format("{0:0}")))
        //        .GroupFooterTemplate(result => (result.Sum == null ? "0.00" : result.Sum.Format("{0:0}")));

        column.Bound(s => s.B_NewCreditSalesThisMonth).Width(150).HtmlAttributes(new { @class = "GridColumnRightAlign" }).Title("B. New Credit Sales This Month")
             .Aggregate(aggreages => aggreages.Sum())
                .Format("{0:0}")
                 .FooterTemplate(@<text> @item.Sum.Format("{0:0}") </text>)
               .GroupFooterTemplate(@<text>@item.Sum.Format("{0:0}")</text>);

        column.Bound(s => s.C_TransferInFromOtherUnitAndAccepted).Width(150).HtmlAttributes(new { @class = "GridColumnRightAlign" }).Title("C. Transfer In From Other Unit And Accepted")
             .Aggregate(aggreages => aggreages.Sum())
                .Format("{0:0}")
                .FooterTemplate(@<text> @item.Sum.Format("{0:0}") </text>)
               .GroupFooterTemplate(@<text>@item.Sum.Format("{0:0}")</text>);


        column.Bound(s => s.D_TransferInFromOtherUnitButNotAccepted).Width(150).HtmlAttributes(new { @class = "GridColumnRightAlign" }).Title("D. Transfer In From Other Unit But Not Accepted")
             .Aggregate(aggreages => aggreages.Sum())
                .Format("{0:0}")
                 .FooterTemplate(@<text> @item.Sum.Format("{0:0}") </text>)
               .GroupFooterTemplate(@<text>@item.Sum.Format("{0:0}")</text>);

        column.Bound(s => s.E_FullPaidThisMonth).Width(150).HtmlAttributes(new { @class = "GridColumnRightAlign" }).Title("E. Full Paid This Month")
             .Aggregate(aggreages => aggreages.Sum())
                .Format("{0:0}")
                 .FooterTemplate(@<text> @item.Sum.Format("{0:0}") </text>)
               .GroupFooterTemplate(@<text>@item.Sum.Format("{0:0}")</text>);

        column.Bound(s => s.F_SystemReturnThisMonth).Width(150).HtmlAttributes(new { @class = "GridColumnRightAlign" })
            .Template(@<a href="../SystemReturns/SystemReturnCustomersReview?cs=@item.Unit_Code&cm=sr" target="_blank">@item.F_SystemReturnThisMonth</a>)
            .Title("F. System Return This Month")
             .Aggregate(aggreages => aggreages.Sum())
                .Format("{0:0}")
                 .FooterTemplate(@<text> @item.Sum.Format("{0:0}") </text>)
               .GroupFooterTemplate(@<text>@item.Sum.Format("{0:0}")</text>);

        column.Bound(s => s.G_TransferOutToOtherUnitAndAccepted).Width(150).HtmlAttributes(new { @class = "GridColumnRightAlign" }).Title("G. Transfer Out To Other Unit And Accepted")
             .Aggregate(aggreages => aggreages.Sum())
                .Format("{0:0}")
                 .FooterTemplate(@<text> @item.Sum.Format("{0:0}") </text>)
               .GroupFooterTemplate(@<text>@item.Sum.Format("{0:0}")</text>);

        column.Bound(s => s.H_TransferOutToOtherUnitButNotAccepted).Width(150).HtmlAttributes(new { @class = "GridColumnRightAlign" }).Title("H. Transfer Out To Other Unit But Not Accepted")
             .Aggregate(aggreages => aggreages.Sum())
                .Format("{0:0}")
                 .FooterTemplate(@<text> @item.Sum.Format("{0:0}") </text>)
               .GroupFooterTemplate(@<text>@item.Sum.Format("{0:0}")</text>);

        column.Bound(s => s.I_ClosingNoOfActiveCustomer__G_A_B_C_D_E_F_G_H_).Width(150).HtmlAttributes(new { @class = "GridColumnRightAlign" }).Title("I. Closing No Of Active Customer (G=A+B+C+D-E-F-G-H)")
             .Aggregate(aggreages => aggreages.Sum())
                .Format("{0:0}")
                 .FooterTemplate(@<text> @item.Sum.Format("{0:0}") </text>)
               .GroupFooterTemplate(@<text>@item.Sum.Format("{0:0}")</text>);

        column.Bound(s => s.NoOfCashSalesThisMonth).Width(150).HtmlAttributes(new { @class = "GridColumnRightAlign" })
             .Aggregate(aggreages => aggreages.Sum())
                .Format("{0:0}")
                 .FooterTemplate(@<text> @item.Sum.Format("{0:0}") </text>)
               .GroupFooterTemplate(@<text>@item.Sum.Format("{0:0}")</text>);

        column.Bound(s => s.CashSalesAmountThisMonth).Width(150).HtmlAttributes(new { @class = "GridColumnRightAlign" })
             .Aggregate(aggreages => aggreages.Sum())
                .Format("{0:0}")
                 .FooterTemplate(@<text> @item.Sum.Format("{0:0}") </text>)
               .GroupFooterTemplate(@<text>@item.Sum.Format("{0:0}")</text>);

        column.Bound(s => s.DPCollectionThisMonth).Width(150).HtmlAttributes(new { @class = "GridColumnRightAlign" })
             .Aggregate(aggreages => aggreages.Sum())
                .Format("{0:0}")
                 .FooterTemplate(@<text> @item.Sum.Format("{0:0}") </text>)
               .GroupFooterTemplate(@<text>@item.Sum.Format("{0:0}")</text>);

        column.Bound(s => s.RegularOrODRecoveryThisMonth).Width(150).HtmlAttributes(new { @class = "GridColumnRightAlign" }).Title("Total Collection (Regular & OD) This Month")
             .Aggregate(aggreages => aggreages.Sum())
                .Format("{0:0}")
                 .FooterTemplate(@<text> @item.Sum.Format("{0:0}") </text>)
               .GroupFooterTemplate(@<text>@item.Sum.Format("{0:0}")</text>);

        column.Bound(s => s.TotalOverdue).Width(150).HtmlAttributes(new { @class = "GridColumnRightAlign" })
             .Aggregate(aggreages => aggreages.Sum())
                .Format("{0:0}")
                 .FooterTemplate(@<text> @item.Sum.Format("{0:0}") </text>)
               .GroupFooterTemplate(@<text>@item.Sum.Format("{0:0}")</text>);

        column.Bound(s => s.TotalAdvance).Width(150).HtmlAttributes(new { @class = "GridColumnRightAlign" }).Aggregate(aggreages => aggreages.Sum())
                .Format("{0:0}")
                 .FooterTemplate(@<text> @item.Sum.Format("{0:0}") </text>)
               .GroupFooterTemplate(@<text>@item.Sum.Format("{0:0}")</text>);

        column.Bound(s => s.TotalOutstanding).Width(150).HtmlAttributes(new { @class = "GridColumnRightAlign" })
             .Aggregate(aggreages => aggreages.Sum())
                .Format("{0:0}")
                 .FooterTemplate(@<text> @item.Sum.Format("{0:0}") </text>)
               .GroupFooterTemplate(@<text>@item.Sum.Format("{0:0}")</text>);

        column.Bound(s => s.FinalizedByRM).Format("{0:dd-MMM-yyyy}").Width(90).HtmlAttributes(new { @class = "GridColumnLeftAlign" });
        column.Bound(s => s.FinalizedByZM).Format("{0:dd-MMM-yyyy}").Width(90).HtmlAttributes(new { @class = "GridColumnLeftAlign" });
        column.Bound(s => s.FinalizedByHO).Format("{0:dd-MMM-yyyy}").Width(90).HtmlAttributes(new { @class = "GridColumnLeftAlign" });

        column.Template(@<a href="#" onclick="return SaveSalesStatus('@item.Unit_Code','@item.FinalizedByRM','@item.FinalizedByZM','@item.FinalizedByHO');">Save</a>).Width(50);
    })
                                                                                                                                                                                                    .Selectable()
                                                                                                                                                                                                    .Scrollable(scroll => scroll.Height(300))
                                                                                                                                                                                                    .Groupable(settings => settings.Groups(group =>
                                                                                                                                                                                                    {
                                                                                                                                                                                                        group.Add(g => g.Zone_Name);
                                                                                                                                                                                                        group.Add(g => g.Region_Name);

                                                                                                                                                                                                    }).Visible(false))
                                                                                                                                                                                                    )
</div>
<table cellpadding="0" cellspacing="0" border="0" style="padding: 15px;" width="100%">
    <tr>
        <td align="left">
            Total number of Units:&nbsp;&nbsp;@ViewBag.TotalNumberofUnits
        </td>
    </tr>
    <tr>
        <td align="left">
            Entry finalized by RM:&nbsp;&nbsp;@ViewBag.EntryfinalizedbyRM
        </td>
    </tr>
    <tr>
        <td align="left">
            Entry finalized by ZM:&nbsp;&nbsp;@ViewBag.EntryFinalizedbyZM
        </td>
    </tr>
    <tr>
        <td align="left">
            Entry finalized by HO:&nbsp;&nbsp;@ViewBag.EntryfinalizedbyHO
        </td>
    </tr>
</table>
<script type="text/javascript">

    function RSFMenu(goFor) {
        window.location.replace(Helper.Menu("../../", goFor));
        return false;
    }

    function SaveSalesStatus(unitCode, FinalizedByRM, FinalizedByZM, FinalizedByHO) {

        var locationType =  @(Html.Raw(Json.Encode(ViewBag.Location)));

        if ($('#hfIsAuthenticForSave').val() == "False") {
            alert("You Are Not an Authentic Approver for This Location");
            return false;
        }
        
        if (locationType == "Region") {

            if (FinalizedByRM != "") {
                alert("You Already Confirm. Cannot Confirm Again.");
                return false;
            }
            else {
                SaveSalesStatusAjax(unitCode);
                return true;
            }
        }
        else if (locationType == "Zone") {

            if (FinalizedByRM == "") {
                alert("Cannot Save before RM Confirm.");
                return false;
            }
            else if (FinalizedByZM != "") {
                alert("You Already Confirm. Cannot Confirm Again.");
                return false;
            }
            else {
                SaveSalesStatusAjax(unitCode);
                return true;
            }
        }
        else if (locationType == "HO") {

            if (FinalizedByRM == "") {
                alert("Cannot Save before RM Confirm.");
                return false;
            }
            else if (FinalizedByZM == "") {
                alert("Cannot Save before ZM Confirm.");
                return false;
            }
            else if (FinalizedByHO != "") {
                alert("You Already Confirm. Cannot Confirm Again.");
                return false;
            }
            else {
                SaveSalesStatusAjax(unitCode);
                return true;
            }
        }
        else {
            return false;
        }
    }

    function SaveSalesStatusAjax(unitCode) {

        $.ajax({
            type: "POST",
            url: '@Url.Action("SaveSalesStatus", "SalesDept")',
            data: "{'unitCode':'" + unitCode + "'}",
            contentType: "application/json; charset=utf-8",
            dataType: 'json',
            cache: false,
            success: function (data) {

                if (data == "Succeed") {
                    alert("Confirmation is Succeed.");
                }
                else if (data == "NotSucceed")
                { alert("Confirmation is Succeed."); }

            },
            error: function () {
                alert("Failed to load Item");
            }
        });

    }    

</script>
