@using RASolarERP.Model;
@model IEnumerable<RASolarERP.Model.InventoryAuditAdjustment>
@{
    ViewBag.Title = "Audit Adjustment System Return Item";
    
    
    Layout = "~/Areas/Inventory/Views/Shared/_InventoryLayout.cshtml";

    if (false)
    {
    <script src="../../../../Scripts/jquery-1.5.1.min.js" type="text/javascript"></script>
    <script src="../../../../Scripts/RASolarCustomFunction.js" type="text/javascript"></script>    
    }
}
@section TopMenu
{
    @Html.Partial((String)ViewBag.TopMenu)
}
@section LoginInfo
{
    <table cellpadding="0" cellspacing="0" border="0" style="text-align: right;" width="100%">
        <tr>
            <td style="width: 20%" align="left">
                @ViewBag.ZoneTitle&nbsp; @ViewBag.ZoneName
            </td>
            <td style="width: 20%" align="left">
                @ViewBag.RegionTitle&nbsp; @ViewBag.RegionName
            </td>
            <td style="width: 20%" align="left">
                @ViewBag.UnitTitle&nbsp; @ViewBag.UnitName
            </td>
            <td style="width: 40%" align="left">
                @ViewBag.OpenMonthYear
            </td>
        </tr>
    </table>
}
@{
    List<AdjustmentReasonCodes> reasonsCode = new List<AdjustmentReasonCodes>();
    reasonsCode = ViewBag.NewReasons;
}
<table cellpadding="0" cellspacing="0" border="0" width="100%">
    <tr>
        <td>
            <table cellpadding="0" cellspacing="0" border="0" width="100%">
                <tr>
                    <td style="width: 50%" align="left">
                        Audit Start Date:&nbsp;&nbsp;@ViewBag.AuditStartDate
                    </td>
                    <td style="width: 50%" align="left">
                        Audit Code:&nbsp;&nbsp;@ViewBag.AuditCode
                    </td>
                </tr>
                <tr>
                    <td style="width: 50%" align="left">
                        Audit Finish Date:&nbsp;&nbsp; @ViewBag.AuditFinishedDate
                    </td>
                    <td style="width: 50%" align="right">
                        <a href="@Url.Action("AuditAdjustmentSystemReturnItem", "InventoryAudit")" style="font-size:15px; color:#7EBF39; font-weight:bold;">
                            Refresh Page</a>
                    </td>
                </tr>
            </table>
        </td>
    </tr>
    <tr>
        <td class="HorizontalDivider">
        </td>
    </tr>
</table>
<div class="DataGridXScroll">
    @(Html.Telerik().Grid(Model)
    .Name("grvInventoryAuditAdjustment")
    .DataKeys(keys => keys.Add(k => k.Item_code))
    .Columns(

    column =>
    {
        column.Bound(a => a.Item_code).Width(100).HtmlAttributes(new { @class = "GridColumnLeftAlign" }).Title("Item Code");
        column.Bound(a => a.Item_Name).Width(150).HtmlAttributes(new { @class = "GridColumnLeftAlign" }).Title("Item Name");
        column.Bound(a => a.Item_Model).Width(100).HtmlAttributes(new { @class = "GridColumnLeftAlign" }).Title("Item Model");
        column.Bound(a => a.ClosingBalance).Width(70).Title("Closing Balance").HtmlAttributes(new { @class = "GridColumnRightAlign" });
        column.Bound(a => a.Damage_Repairable_Closing).Width(70).Title("Damage Closing Balance").HtmlAttributes(new { @class = "GridColumnRightAlign" });
        column.Bound(a => a.NetSaleableBalance).Width(70).Title("Net Saleable Item").HtmlAttributes(new { @class = "GridColumnRightAlign" }).Title("Net Saleable Balance");
        column.Bound(a => a.Item_code).Width(100).HtmlAttributes(new { @class = "GridColumnLeftAlign" }).Title("Item Code");
        column.Template(@<input type="text" id="@("AuditAdjutColsingBalance" + @item.Item_code.Trim())" style="width:80px;" class="GridTextBoxRightAlign" 
        
         @if (@item.Issued_AuditAdjustment == 0)
         {
                            <text>value="@(@item.Received_AuditAdjustment)"</text>
         }
         else
         {
            <text>value="@(@item.Issued_AuditAdjustment)"</text>
         }
         />).Title("Audit Adjustment (Closing Balance)").Width(100);
        column.Template(@<select id= "@("ddlAuditAdjustmentReasons" + @item.Item_code.Trim())" class="DropDown">
            <option value="0">--Select--</option>
            @foreach (AdjustmentReasonCodes rr in reasonsCode)
            {
                if (@item.RefReasonForAuditAdjustment == rr.ReasonCode)
                {
                <option value="@(@rr.ReasonCode)" selected="selected">
                    @rr.ReasonDescription
                </option>
                }
                else
                {              
                <option value="@(@rr.ReasonCode)">
                    @rr.ReasonDescription
                </option>
                }
            }
        </select>
            ).Title("Reason for Adjustment").Width(135);
        column.Template(@<input type="text" id="@("DamageAdjutColsingBalance" + @item.Item_code.Trim())" style="width:80px;" class="GridTextBoxRightAlign" value="@(@item.RD_AuditAdjustment)" />).Title("Audit Adjustment (Damage Closing Balance)").Width(100);
        column.Template(@<select id="@("ddlDamageAdjustmentReason" + @item.Item_code.Trim())" class="DropDown">
            <option value="0">--Select--</option>
            @foreach (AdjustmentReasonCodes rr in reasonsCode)
            {
                if (@item.RefReasonForRD_AuditAdjustment == rr.ReasonCode)
                {
                <option value="@(@rr.ReasonCode)" selected="selected">
                    @rr.ReasonDescription
                </option>
                }
                else
                {              
                <option value="@(@rr.ReasonCode)">
                    @rr.ReasonDescription
                </option>
                }
            }
        </select>).Title("Reason for Damage Adjustment").Width(135);

        column.Bound(a => a.ClosingBalanceAfterAuditAdjustment).Width(70).Title("Final Closing Balance after Audit Adjustment").HtmlAttributes(new { @class = "GridColumnRightAlign" });
        column.Bound(a => a.DamageClosingBalanceafterAuditAdjustment).Width(70).Title("Final Damage Closing Balance after Audit Adjustment").HtmlAttributes(new { @class = "GridColumnRightAlign" });
        column.Template(@<label>@item.NetSaleableafterAuditAdjustment
        </label>).Title("Final Net Saleable Balance after Audit Adjustment").Width(70).HtmlAttributes(new { @class = "GridColumnRightAlign" });

        column.Template(@<input type="text" id="@("remarksInventoryAudit" + @item.Item_code.Trim())" style="width:90px;" value="@(@item.Remarks)" />).Width(105).Title("Remarks");

        column.Template(@<a href="#" onclick="return SaveAuditAdjustment('@item.Item_code.Trim()', '@item.ClosingBalanceAfterAuditAdjustment', '@item.DamageClosingBalanceafterAuditAdjustment' ,'@ViewBag.AuditFinishedDate');">Save</a>).Width(50);
        column.Bound(a => a.RefReasonForAuditAdjustment).Hidden(true).Width(100);
        column.Bound(a => a.RefReasonForRD_AuditAdjustment).Hidden(true).Width(100);
        column.Bound(a => a.Received_AuditAdjustment).Hidden(true).Width(100);
        column.Bound(a => a.Issued_AuditAdjustment).Hidden(true).Width(100);

    }).Selectable()
    .Pageable(page => page.PageSize(60))
    .Scrollable(scroll => scroll.Height(300))
              )
</div>
<script type="text/javascript">

    function SaveAuditAdjustment(itemCode, ClosingBalance, Damage_Repairable_Closing, finishedDate) {

        if (finishedDate != "") {
            alert("After Finish Audit, Cannot Save anything.");
            return false;
        }

        var closingBalanceAuditAdjustment = 0;
        var resonforAdjustment = 0;
        var damageClosingBalanceAuditAdjustment = 0;
        var resonforDamageAdjustment = 0;
        var remarks = "";

        var cbAudit = 0;
        var cdAudit = 0;
        var nsbAudit = 0;

        closingBalanceAuditAdjustment = $('#AuditAdjutColsingBalance' + itemCode).val();
        resonforAdjustment = $('#ddlAuditAdjustmentReasons' + itemCode).val();
        damageClosingBalanceAuditAdjustment = $('#DamageAdjutColsingBalance' + itemCode).val();
        resonforDamageAdjustment = $('#ddlDamageAdjustmentReason' + itemCode).val();
        remarks = $('#remarksInventoryAudit' + itemCode).val();

        if (parseInt(closingBalanceAuditAdjustment) < 0) {

            cbAudit = parseInt(ClosingBalance) + parseInt(closingBalanceAuditAdjustment);
        }
        else {
            cbAudit = parseInt(ClosingBalance) + parseInt(closingBalanceAuditAdjustment);
        }

        if (cbAudit < 0) {
            alert("Audit Value Cannot Less Than Colsing Balance.");
            return false;
        }

        if ((parseInt(Damage_Repairable_Closing) + parseInt(damageClosingBalanceAuditAdjustment)) < 0) {

            cdAudit = (parseInt(Damage_Repairable_Closing) + parseInt(damageClosingBalanceAuditAdjustment));
        }
        else {
            cdAudit = (parseInt(Damage_Repairable_Closing) + parseInt(damageClosingBalanceAuditAdjustment));
        }

        if (cdAudit < 0) {
            alert("Audit Damage Value Cannot Less Than Colsing Damage Balance.");
            return false;
        }

        //        if (parseInt(closingBalanceAuditAdjustment) < parseInt(damageClosingBalanceAuditAdjustment)) {
        //            alert("Damage Audit Item Cannot Greater Than Audit Closing Item.");
        //            return false;
        //        }

        if (cbAudit != 0 && cdAudit != 0)
            nsbAudit = cbAudit - cdAudit;

        if (nsbAudit < 0) {
            alert("Balance Cannot be Negative");
            return false;
        }

        if (closingBalanceAuditAdjustment != "") {

            if (parseInt(closingBalanceAuditAdjustment) != 0) {
                if (resonforAdjustment == "0") {
                    alert("Please Select The Audit Adjustment Reason");
                    return false;
                }
            }
        }

        //        if (parseInt(damageClosingBalanceAuditAdjustment) < 0) {
        //            alert("Negative Damage Value is not Support");
        //            $('#DamageAdjutColsingBalance' + itemCode).val("0");
        //            return false;
        //        }

        if (closingBalanceAuditAdjustment == "") {

            if (resonforAdjustment != "0") {
                alert("Please Give Audit Value");
                return false;
            }
        }
        else if (parseInt(closingBalanceAuditAdjustment) == 0) {
            if (resonforAdjustment != "0") {
                alert("Please Give Audit Value");
                return false;
            }
        }

        if (damageClosingBalanceAuditAdjustment == "") {

            if (resonforDamageAdjustment != "0") {
                alert("Please Give Damage Audit Value");
                return false;
            }
        }
        else if (parseInt(damageClosingBalanceAuditAdjustment) == 0) {
            if (resonforDamageAdjustment != "0") {
                alert("Please Give Damage Audit Value");
                return false;
            }
        }

        if (damageClosingBalanceAuditAdjustment != "") {

            if (parseInt(damageClosingBalanceAuditAdjustment) != 0) {
                if (parseInt(resonforDamageAdjustment) == 0) {
                    alert("Please Select The Damage Adjustment Reason");
                    return false;
                }
            }
        }

        if (damageClosingBalanceAuditAdjustment == "") {
            damageClosingBalanceAuditAdjustment = 0;
        }


        SaveAuditAdjustmentAjax(itemCode, closingBalanceAuditAdjustment, resonforAdjustment, damageClosingBalanceAuditAdjustment, resonforDamageAdjustment, remarks)
        return false;

    }

    function SaveAuditAdjustmentAjax(itemCode, closingBalanceAuditAdjustment, resonforAdjustment, damageClosingBalanceAuditAdjustment, resonforDamageAdjustment, remarks) {

        $.ajax({
            type: "POST",
            url: '@Url.Action("AuditAdjustmentForSystemReturnItem", "InventoryAudit")',
            data: "{'itemCode':'" + itemCode + "','closingBalanceAuditAdjustment':'" + closingBalanceAuditAdjustment + "','resonforAdjustment':'" + resonforAdjustment + "','damageClosingBalanceAuditAdjustment':'" + damageClosingBalanceAuditAdjustment + "','resonforDamageAdjustment':'" + resonforDamageAdjustment + "','remarks':'" + remarks + "'}",
            contentType: "application/json; charset=utf-8",
            dataType: 'json',
            cache: false,
            success: function (data) {

                if (data == "succeed") {
                    alert("Save is Succeed.");
                }
                else if (data == "nSucceed")
                { alert("Save is not Succeed."); }
                else if (data == "")
                { alert("No Data is Found For Audit."); }
            },
            error: function () {
                alert("Connection Is Not Avaiable. Try Later.");
            }
        });
    }

    function RSFMenu(goFor) {
        window.location.replace(Helper.Menu("../../", goFor));
        return false;
    } 

</script>
