@using RASolarERP.Model;
<script type="text/javascript">

    var myError = "";

    var firstTimeLoad = true;
    function onDataBinding(e) {
        if (firstTimeLoad) {
            e.preventDefault();
            firstTimeLoad = false;
        }
        else {
            var itemDetails = "";
            e.data = {
                ItemCategory: $('#ddlItemCategory').val(),
                Item: $('#ddlItem').val(),
                StoreLocation: $('#ddlStoreLocation').val(),
                fromDate: $('#txtStartDate').val(),
                toDate: $('#txtEndDate').val(),

                itemDetails: itemDetails
            }
        }
    }

    function onError(args) {
        myError = args;
        args.preventDefault();
        alert(myError.XMLHttpRequest.responseText);
    }
</script>
@{
    ViewBag.Title = "Item Ledger Report";
    Layout = "~/Areas/Inventory/Views/Shared/_InventoryLayout.cshtml";

    if (false)
    {
    <script src="../../../../Scripts/jquery-1.5.1.min.js" type="text/javascript"></script>
    }
}
@section TopMenu
{
    @Html.Partial((String)ViewBag.TopMenu)
}
@section LoginInfo
{
    <table cellpadding="0" cellspacing="0" border="0" style="text-align: right;" width="100%">
        <tr>
            <td style="width: 20%" align="left">
                @ViewBag.ZoneTitle&nbsp; @ViewBag.ZoneName
            </td>
            <td style="width: 20%" align="left">
                @ViewBag.RegionTitle&nbsp; @ViewBag.RegionName
            </td>
            <td style="width: 20%" align="left">
                @ViewBag.UnitTitle&nbsp; @ViewBag.UnitName
            </td>
            <td style="width: 40%" align="left">
                @ViewBag.OpenMonthYear
            </td>
        </tr>
    </table>
}
<table cellpadding="0" cellspacing="0" border="0" width="100%">
    <tr>
        <td>
            @using (Html.BeginForm("InventoryLedger", "InventoryDailyTransaction", FormMethod.Post, null))
            {
                <table cellpadding="0" cellspacing="0" border="0" width="100%">
                    <tr>
                        <td align="left" class="IsrlLeftColumn">Item Type
                        </td>
                        <td align="left" class="IsrlLeftColumn">
                            @Html.DropDownList("ddlItemType", new SelectList(ViewBag.ItemType, "ItemTypeID", "Description"), "--Select--", new { @class = "IsrlDropDown" })
                        </td>
                        <td align="left" class="IsrlLeftColumn">Item Category
                        </td>
                        <td align="left" class="IsrlLeftColumn">
                            @Html.DropDownList("ddlItemCategory", Enumerable.Empty<SelectListItem>(), new { @class = "IsrlDropDown" })
                        </td>
                        <td align="left" class="IsrlLeftColumn">Item Name
                        </td>
                        <td align="left" class="IsrlLeftColumn">
                            @Html.DropDownList("ddlItem", Enumerable.Empty<SelectListItem>(), "--Select--",
                                        new { @class = "IRDropDown" })
                        </td>
                    </tr>
                    <tr>
                        <td align="left" class="IsrlLeftColumn">Store Location
                        </td>
                        <td align="left" class="IsrlLeftColumn">
                            @Html.DropDownList("ddlStoreLocation", Enumerable.Empty<SelectListItem>(), new { @class = "IsrlDropDown" })
                        </td>
                        <td align="left" class="IsrlLeftColumn">From Date
                        </td>
                        <td align="left" class="IsrlLeftColumn">
                            @(Html.Telerik().DatePicker()
                            .Name("txtStartDate")
                            .Max(new DateTime(2999, 12, 31))
                            .Format("dd-MMM-yyyy")
                            )
                        </td>
                        <td align="left" class="IsrlLeftColumn">To Date
                        </td>
                        <td align="left" class="IsrlLeftColumn">
                            @(Html.Telerik().DatePicker()
                            .Name("txtEndDate")
                            .Max(new DateTime(2999, 12, 31))
                        .Format("dd-MMM-yyyy")
                        )
                        </td>
                    </tr>
                    <tr>
                        <td align="left" colspan="3" style="padding-top: 8px;">
                            <input id="btnShowtemList" type="submit" value="Show" onclick="return ShowItemList();"
                                style="width: 60px;" />
                        </td>
                    </tr>
                </table>
            }
        </td>
    </tr>
    <tr>
        <td>
            @(Html.Telerik().Grid<RASolarERP.DomainModel.InventoryModel.ItemLedgerReport>()
                .Name("gvItemLocationWise")
                .DataKeys(keys => keys.Add(k => k.ChallanSeqNo))
                .Columns(column =>
                {
                    column.Bound(s => s.TransDate).Title("Trans Date").Format("{0:dd-MMM-yyyy}").Width(100);
                    column.Bound(s => s.Particulars).Title("Particulars").Width(150);
                    column.Bound(s => s.MRRSeqNo).Title("MRRSeqNo").Width(100).ClientTemplate("<#if(MRRSeqNo==''){&nbsp;} else{#> <a href='../InventoryDailyTransaction/ChallanDetails?ChallanSeqNo=<#=MRRSeqNo#>&Challan=MRR&locationCode=' target=\"_blank\" ><#=MRRSeqNo#></a> <#}#>");
                    column.Bound(s => s.ChallanSeqNo).Title("Challan Seq No").Width(100).ClientTemplate("<#if(ChallanSeqNo==''){&nbsp;} else{#> <a href='../InventoryDailyTransaction/ChallanDetails?ChallanSeqNo=<#=ChallanSeqNo#>&Challan=CHALLAN&locationCode=' target=\"_blank\"><#=ChallanSeqNo#></a> <#}#>");
                    column.Bound(s => s.ReceiveQuantity).Width(100)
                        .ClientTemplate("<#if(MRRSeqNo=='          '){#><#=ReceiveQuantity#><#} else{#> <a href='#' onclick=\"return ChallanOrMRRItemSerials('<#=ChallanSeqNo#>','<#=MRRSeqNo#>')\"><#=ReceiveQuantity#></a> <#}#>");
                    column.Bound(s => s.DeliveryQuantity).Title("Delivery Quantity").Width(100)
                        .ClientTemplate("<#if(ChallanSeqNo=='          '){#><#=DeliveryQuantity#><#} else{#> <a href='#' onclick=\"return ChallanOrMRRItemSerials('<#=ChallanSeqNo#>','<#=MRRSeqNo#>')\"><#=DeliveryQuantity#></a> <#}#>");
                    column.Bound(s => s.ClosingBalance).HtmlAttributes(new { @class = "GridColumnRightAlign" }).Title("Closing Balance").Width(100);
                })
                    .DataBinding(settings => settings.Ajax().Select("__LoadItemLedger", "InventoryDailyTransaction"))
                    .ClientEvents(events => events
                                    .OnDataBinding("onDataBinding")
                                    .OnError("onError")
                                    )
                    .Scrollable(scroll => scroll.Height(250))
                    .Selectable()
                    .Pageable(pages => pages.PageSize(100))
                    .Footer(true)
                             )
        </td>
    </tr>
    <tr>
        <td style="padding-top: 10px;" align="left">Available Quantity:&nbsp;&nbsp;<a href="#" id="totalAvailableQuantityOfAItem" onclick="return LoadAvailableItemSerial();"></a>
        </td>
    </tr>
    <tr>
        <td style="width: 100%;">
            @(Html.Telerik().Window().Name("dialogChallanOrMrrItemsSerial")
                                          .Title("Item Serial List")
                                          .Draggable(false)
                                          .Resizable(resizing => resizing.Enabled(false)
                                                                         .MinHeight(150)
                                                                         .MinWidth(350)
                                                                         .MaxHeight(800)
                                                                         .MaxWidth(950)
                                                                         )
                                          .Modal(true)
                                          .Buttons(b => b.Close())
                                          .Content(@<p id="ChallanOrMrrItemsSerialList" style="min-height: 150px; max-height: 800px; min-width: 350px; max-width: 950px; padding: 0; margin: 0;">
                                          </p>
                                          )
                                          .Visible(false)
                                     )
        </td>
    </tr>
</table>
<script type="text/javascript">

    function ShowItemList() {

        var itemDetails = "";

        var params = {
            ItemCategory: $('#ddlItemCategory').val(),
            Item: $('#ddlItem').val(),
            StoreLocation: $('#ddlStoreLocation').val(),
            fromDate: $('#txtStartDate').val(),
            toDate: $('#txtEndDate').val(),

            itemDetails: itemDetails
        };

        var grid = $('#gvItemLocationWise').data('tGrid');
        grid.dataSource._data = [];
        grid.ajaxRequest(params);

        AvailAbleItemQuantity();

        return false;
    }

    function ChallanOrMRRItemSerials(challanSeqNo, mrrSeqNo) {

        var itemCode = $('#ddlItem').val();
        itemCode = itemCode.split('-')[0];

        LoadSerialList(challanSeqNo, mrrSeqNo, itemCode, "0");

        return false;
    }

    function LoadAvailableItemSerial() {

        var itemCode = $('#ddlItem').val();
        itemCode = itemCode.split('-')[0];

        LoadSerialList("", "", itemCode, $("#ddlStoreLocation").val());

        return false;
    }


    function LoadSerialList(challanSeqNo, mrrSeqNo, itemCode, storeLocation) {

        $.ajax({

            type: 'GET',
            url: '@Url.Action("ChallanOrMRRItemSerials", "InventoryDailyTransaction")',
            data: { challanSeqNo: challanSeqNo, mrrSeqNo: mrrSeqNo, itemCode: itemCode, storeLocation: storeLocation },
            dataType: 'html',
            cache: false,
            success: function (data) {
                $('#ChallanOrMrrItemsSerialList').html("");
                $('#ChallanOrMrrItemsSerialList').html(data);
                var detailWindow = $("#dialogChallanOrMrrItemsSerial").data("tWindow");
                detailWindow.title($("#ddlItem option:selected").text());
                detailWindow.center().open();
            },
            error: function () { alert("Item Does Not Load"); }
        });
    }

    //    function GetSerial(itemCode) {
    //        $('#hfItemCode').val(itemCode);

    //        $.ajax({

    //            type: 'GET',
    //            url: '@Url.Action("_PartialPick", "InventoryDailyTransaction")',
    //            data: { itemCode: itemCode },
    //            dataType: 'html',
    //            cache: false,
    //            success: function (data) {
    //                $('#SerialMappingContent').html(data);
    //            },
    //            error: function () { alert("Item Does Not Load"); }
    //        });

    //        $('#hfDeleteFromClientOrDB').val("0");
    //        $('#serialAlreadyScanQuantity').val($('#quantity' + itemCode).text());

    //        return false;
    //    }

    $(document).ready(function () {

        $('#ddlItemCategory').change(function () {

            var itemCategory = $(this).val();

            $.ajax({
                type: 'POST',
                url: '@Url.Action("ItemListByCategory", "InventoryDailyTransaction")',
                data: "{'itemCategory':'" + itemCategory + "'}",
                contentType: "application/json; charset=utf-8",
                dataType: 'json',
                cache: false,
                success: function (data) {

                    $('#ddlItem').get(0).options.length = 0;
                    $('#ddlItem').get(0).options[0] = new Option('--Select--', '');

                    $.map(data, function (item) {
                        $('#ddlItem').get(0).options[$('#ddlItem').get(0).options.length] = new Option(item.Display, item.Value);
                    });

                    if (data[0].IsItASerializableItem == "1") {
                        $('#btnMapSerial').attr('disabled', false);
                    }
                    else {
                        $('#btnMapSerial').attr('disabled', 'disabled');
                        $('#serialGrid tbody').html('');
                        $('#serialMapForIssue').css('display', 'none');
                    }
                },
                error: function () {
                    alert("Connection Failed. Please Try Again.");
                }
            });
            $('#txtDeliveryQuantity').val("");
        });

        $('#ddlItemType').change(function () {

            var itemTypeId = $('#ddlItemType').val();

            $.ajax({

                type: 'POST',
                url: '@Url.Action("ItemCategorySubCategoryList", "InventoryDailyTransaction")',
                data: "{'itemTypeId':'" + itemTypeId + "'}",
                contentType: 'application/json; charset=utf-8',
                dataType: 'json',
                cache: false,
                success: function (data) {
                    $('#ddlItemCategory').get(0).options.length = 0;
                    $('#ddlItemCategory').get(0).options[0] = new Option('--Select--', '0');

                    $.map(data, function (item) {
                        $('#ddlItemCategory').get(0).options[$('#ddlItemCategory').get(0).options.length] = new Option(item.Display, item.Value);
                        $('#hfIsItemSeralizable').val(item.IsSerializable);
                    });
                },
                error: function () { alert("Item Does Not Load"); }
            });

            $.ajax({

                type: 'POST',
                url: '@Url.Action("StoreLocationListByItemType", "InventoryDailyTransaction")',
                data: "{'itemTypeId':'" + itemTypeId + "'}",
                contentType: 'application/json; charset=utf-8',
                dataType: 'json',
                cache: false,
                success: function (data) {
                    $('#ddlStoreLocation').get(0).options.length = 0;
                    $('#ddlStoreLocation').get(0).options[0] = new Option('--Select--', '0');

                    $.map(data, function (item) {
                        $('#ddlStoreLocation').get(0).options[$('#ddlStoreLocation').get(0).options.length] = new Option(item.Display, item.Value);
                        $('#ddlStoreLocation').val(item.IsSerializable);
                    });
                },
                error: function () { alert("Item Does Not Load"); }
            });
        });

        //        $('#gvItemLocationWise table').delegate('a.LoadSerials', 'click', function () {

        //            var tr = $(this).parent().parent();
        //            var itemCode = tr.find('td:eq(0)').text();
        //            var itemSerialQuantity = tr.find('td:eq(5)').find('a').text();
        //            var itemAvailableQuantity = tr.find('td:eq(4)').text();
        //            var itemName = tr.find('td:eq(1)').text();
        //            var modelCapacity = tr.find('td:eq(3)').text() + " / " + tr.find('td:eq(2)').text();

        //            if (itemSerialQuantity == "0") {
        //                alert("No Serial Is Found of This Item");
        //                return false;
        //            }

        //            $('#hfItemCode').val(itemCode);

        //            var serialMappingTdContent = $('#SerialMappingContent td:contains("Item Code")').text();
        //            serialMappingTdContent = $.trim(serialMappingTdContent);

        //            if (serialMappingTdContent != "") {
        //                LoadSerialList(itemCode);
        //                $('#txtTotalSerialQuantity').val(itemSerialQuantity);
        //                $('#txtAvailableQuantity').val(itemAvailableQuantity);
        //                $('#txtItemCode').val(itemCode);
        //                $('#txtItemName').val(itemName);
        //                $('#modelCapacity').text(modelCapacity);
        //                $('#serialMessage').text("");

        //                $('#txtSerialNo').attr('disabled', true);
        //                $('#btnfinishMapping').attr('disabled', true);
        //            }
        //            else {
        //                GetSerial(itemCode);
        //                $('#hfDeleteFromClientOrDB').val("1");
        //            }
        //            return false;
        //        });
    });


    function AvailAbleItemQuantity() {

        var itemCodeCapacityModel = $('#ddlItem').val().split('-');
        var itemCode = itemCodeCapacityModel[0];
        var storeLocation = $('#ddlStoreLocation').val();

        $.ajax({
            type: 'POST',
            url: '@Url.Action("AvailAbleStoreItemQuantity", "InventoryDailyTransaction")',
            data: "{'itemCode':'" + itemCode + "','storeLocation':'" + storeLocation + "'}",
            contentType: "application/json; charset=utf-8",
            dataType: 'json',
            cache: false,
            success: function (data) {
                $('#totalAvailableQuantityOfAItem').text(data[0].AvailableQuantity);
            },
            error: function () {
                alert("Connection Failed. Please Try Again.");
            }
        });
    }

    function RSFMenu(goFor) {
        window.location.replace(Helper.Menu("../../", goFor));
        return false;
    }

</script>
