@using RASolarERP.DomainModel.InventoryModel;
<script type="text/javascript">

    var firstTime = true;
    function onDataBinding(e) {
        if (firstTime) {
            e.preventDefault();
            firstTime = false;
        }
    }

    function onError(e) {
        e.preventDefault();
    }

    var firstTimeSerial = true;
    function onDataBindingSerial(e) {
        if (firstTimeSerial) {
            e.preventDefault();
            firstTimeSerial = false;
        }
    }

    function onErrorSerial(e) {
        e.preventDefault();
    }

    var firstTimeAssignAsset = true;
    function onDataBindingAssignAsset(e) {
        if (firstTimeAssignAsset) {
            e.preventDefault();
            firstTimeAssignAsset = false;
        }
    }

    function onErrorAssignAsset(e) {
        e.preventDefault();
    }
    
</script>
@{
    ViewBag.Title = "Fixed Asset Register";
    Layout = "~/Areas/Inventory/Views/Shared/_InventoryLayout.cshtml";

    if (false)
    {
    <script src="../../../../Scripts/jquery-1.5.1.min.js" type="text/javascript"></script>
    <script src="../../../../Scripts/RASolarCustomFunction.js" type="text/javascript"></script>
    
    }
}
@section TopMenu
{
    @Html.Partial((String)ViewBag.TopMenu)
}
@section LoginInfo
{
    <table cellpadding="0" cellspacing="0" border="0" style="text-align: right;" width="100%">
        <tr>
            <td style="width: 20%" align="left">
                @ViewBag.ZoneTitle&nbsp; @ViewBag.ZoneName
            </td>
            <td style="width: 20%" align="left">
                @ViewBag.RegionTitle&nbsp; @ViewBag.RegionName
            </td>
            <td style="width: 20%" align="left">
                @ViewBag.UnitTitle&nbsp; @ViewBag.UnitName
            </td>
            <td style="width: 40%" align="left">
                @ViewBag.OpenMonthYear
            </td>
        </tr>
    </table>
}
<input id="hfIsItASerializableItem" type="hidden" value="0" />
<input id="hfItemCode" type="hidden" value="0" />
<input id="hfEmployeeId" type="hidden" value="0" />
<table cellpadding="0" cellspacing="0" border="0" width="100%">
    <tr>
        <td style="width: 33%">
            <table cellpadding="0" cellspacing="2" border="0" width="100%">
                <tr>
                    <td align="left" class="IsrlMiddleColumn">
                        Item Category
                    </td>
                    <td align="left">
                        @Html.DropDownList("ddlItemCategory", new SelectList(ViewBag.FixedAssetCategory, "ItemCategoryID", "Description"), "--Select--", new { @class = "IsrlDropDown" })
                    </td>
                </tr>
            </table>
        </td>
        <td style="width: 33%">
            <table cellpadding="0" cellspacing="2" border="0" width="100%">
                <tr>
                    <td align="left" class="IsrlRightColumn">
                        Store Location
                    </td>
                    <td align="left">
                        @Html.DropDownList("ddlStoreLocation", new SelectList(ViewBag.StoreLocation, "StoreLocationID", "Description"), "--Select--", new { @class = "IsrlDropDown" })
                    </td>
                </tr>
            </table>
        </td>
        <td style="width: 33%">
            <table cellpadding="0" cellspacing="2" border="0" width="100%">
                <tr>
                    <td align="left" class="IsrlMiddleColumn">
                        Employee
                    </td>
                    <td align="left">
                        @Html.DropDownList("ddlEmployee", new SelectList(ViewBag.Employee, "EmployeeId", "EmployeeName"), "--Select--", new { @class = "IsrlDropDown" })
                    </td>
                </tr>
            </table>
        </td>
    </tr>
    <tr>
        <td colspan="3">
            <input id="btnShowtemList" type="submit" value="Show" onclick="return ShowItemList();"
                style="width: 60px;" />
        </td>
    </tr>
    <tr>
        <td colspan="3">
            @(Html.Telerik().Grid<AvailableNAssignFixedAsset>()
                        .Name("gvLocationWiseAsset")
                        .DataKeys(keys => keys.Add(k => k.ItemCode))
                        .Columns(column =>
                        {
                            column.Bound(s => s.ItemCode);
                            column.Bound(s => s.ItemName);
                            column.Bound(s => s.ItemCapacity);
                            column.Bound(s => s.ItemModel);
                            //column.Bound(s => s.AvailableQuantity).HtmlAttributes(new { @class = "GridColumnRightAlign" });
                            //column.Bound(s => s.SerialQuantity).ClientTemplate("<a href=\"#\" id=\"quantity<#=ItemCode#>\" onclick=\"return GetAssignedAndTotalSerial(<#=ItemCode#>);\"> <#=SerialQuantity#> </a>").HtmlAttributes(new { @class = "GridColumnRightAlign" });
                            column.Bound(s => s.TotalAssignedButNotConsumedPlusUnassignedQuantity).Title("Total Quantity").ClientTemplate("<a href=\"#\" id=\"quantity<#=ItemCode#>\" onclick=\"return GetAssignedAndTotalSerial('<#=ItemCode#>','ALL');\"> <#=TotalAssignedButNotConsumedPlusUnassignedQuantity#> </a>").HtmlAttributes(new { @class = "GridColumnRightAlign" });
                            column.Bound(s => s.AssignedButNotConsumedQuantity).Title("Assigned Quantity").ClientTemplate("<a href=\"#\" id=\"quantity<#=ItemCode#>\" onclick=\"return GetAssignedAndTotalSerial('<#=ItemCode#>','');\"> <#=AssignedButNotConsumedQuantity#> </a>").HtmlAttributes(new { @class = "GridColumnRightAlign" }); ;
                            column.Bound(s => s.UnassignedQuantity).ClientTemplate("<a href=\"#\" onclick=\"return AssignAssetToEmployee('<#=ItemCode#>', '<#=IsItASerializableItem#>','<#=UnassignedQuantity#>' );\" ><#=UnassignedQuantity#></a>").HtmlAttributes(new { @class = "GridColumnRightAlign" }); ;
                            column.Bound(s => s.ItemCode).ClientTemplate("<a href=\"#\" onclick=\"return AssignAssetToEmployee('<#=ItemCode#>', '<#=IsItASerializableItem#>','<#=UnassignedQuantity#>');\" >Assignment</a>").Title("").Width(80);
                            column.Bound(s => s.IsItASerializableItem).Hidden(true);
                        })
                        .DataBinding(settings => settings.Ajax().Select("__AvailableItemInALocation", "InventoryManagement"))
                        .ClientEvents(events =>
                        {
                            events.OnDataBinding("onDataBinding");
                            events.OnError("onError");
                        })
                        .Scrollable(scroll => scroll.Height(250))
                        .Selectable()
                        .Footer(false)
             )
        </td>
    </tr>
    <tr id="availableSerialAndAssignSerialList">
        <td colspan="3">
            @(Html.Telerik().Grid<RASolarERP.DomainModel.InventoryModel.FixedAssetSerialList>()
                         .Name("gvFixedAssetSerialList")
                        .DataKeys(keys => keys.Add(k => k.ItemSerialNo))
                        .Columns(column =>
                        {
                            column.Bound(s => s.ItemSerialNo);
                            column.Bound(s => s.EmployeeID);
                            column.Bound(s => s.EmployeeName);
                            column.Bound(s => s.AllocationDate).Format("{0:dd-MM-yyyy}");
                            column.Bound(s => s.Remarks);
                            column.Bound(s => s.AllocationSeqNo).Hidden(true);
                            column.Bound(s => s.ItemCode).Hidden(true);
                            column.Bound(s => s.Option).Hidden(true);
                            column.Bound(s => s.EmployeeID).ClientTemplate("<#if(EmployeeID != null && Option != 'VIEWASSIGNANDUNASSIGN'){#><a href=\"#\" onclick=\"return UnAssignAssetToEmployee('<#=EmployeeID#>', '<#=ItemSerialNo#>', '<#=AllocationSeqNo#>', '<#=ItemCode#>');\" >Un-Assigned</a> <#} else{#>&nbsp<#}#>").Title("");
                        })
                        .DataBinding(settings => settings.Ajax().Select("__FixedAssetSerialList", "InventoryManagement"))
                        .ClientEvents(events =>
                        {
                            events.OnDataBinding("onDataBindingSerial");
                            events.OnError("onErrorSerial");
                        })
                        .Scrollable(scroll => scroll.Height(200))
                        .Selectable()
                        .Footer(false)
             )
        </td>
    </tr>
    <tr id="assetAssignUnassignToEmployee">
        <td colspan="3">
            <table cellpadding="0" cellspacing="2" border="0" width="100%">
                <tr>
                    <td id="mapingSerialsForAssignAsset">
                        <fieldset class="sagGroupBox">
                            <legend>Serial Information</legend>
                            <table cellpadding="0" cellspacing="1" border="0" width="100%">
                                <tr>
                                    <td align="left" width="13%">
                                        Serial No
                                    </td>
                                    <td align="left" width="44%" id="SerialContainer">
                                        @Html.DropDownList("ddlAssignAseetSerials", Enumerable.Empty<SelectListItem>(), "--Select--", new { @class = "IRDropDown" })
                                    </td>
                                    <td align="left" width="13%">
                                        Total Serial Quantity
                                    </td>
                                    <td align="left" width="30%">
                                        @Html.TextBox("txtTotalSerialQuantity", "", new { @readonly = "readonly" })
                                    </td>
                                </tr>
                                <tr>
                                    <td colspan="4" style="height: 3px;">
                                    </td>
                                </tr>
                            </table>
                        </fieldset>
                        <table cellpadding="0" cellspacing="0" border="0" width="100%">
                            <tr>
                                <td style="color: Red; padding: 5px; font-weight: bold; font-size: 13px;" id="serialMessage">
                                </td>
                            </tr>
                            <tr>
                                <td width="100%">
                                    <table class="TableData" cellpadding="0" cellspacing="0" id="serialGrid" width="100%">
                                        <thead>
                                            <tr>
                                                <th align="center">
                                                    Serial No
                                                </th>
                                                <th align="center">
                                                    Status
                                                </th>
                                                <th align="center">
                                                    Action
                                                </th>
                                            </tr>
                                        </thead>
                                        <tbody>
                                        </tbody>
                                    </table>
                                </td>
                            </tr>
                        </table>
                    </td>
                </tr>
                <tr>
                    <td>
                        @(Html.Telerik().Grid<RASolarERP.DomainModel.InventoryModel.AssetAssign>()
                        .Name("gvFixedAssetAssignToEmployee")
                        .DataKeys(keys => keys.Add(k => k.ItemCode))
                        .Columns(column =>
                        {
                            column.Bound(s => s.EmployeeID);
                            column.Bound(s => s.EmployeeName);
                            column.Bound(s => s.AvailableToAssignQuantity);
                            column.Bound(s => s.AssignedQuantity).Title("Already Assigned (In Use) Qty");
                            column.Bound(s => s.EmployeeID).ClientTemplate("<input type='text' id='assignQuantity<#=EmployeeID#>' style=\"width:100px;\" onblur=\"return CheckAssignQuantity(this.value, '<#=EmployeeID#>');\" value='' />").Title("Allocation Quantity Now");
                            //column.Bound(s => s.UnallocatedQuantity);
                            //column.Bound(s => s.AlreadyAllocated).Title("Already Allocated Quantity");                          
                            //column.Bound(s => s.UnallocatedQuantity).Format("{0:0}").Title("Remaining Unallocated Quantity");
                            //column.Bound(s => s.AllocationDate).Format("{0:dd-MM-yyyy}");
                            //column.Bound(s => s.EmployeeID).ClientTemplate("<input type='text' id='assignRemarks<#=EmployeeID#>' style=\"width:100px;\" value='<#=Remarks#>' />").Width(120).Title("Remarks");
                            column.Bound(s => s.EmployeeID).ClientTemplate("&nbsp;").Title("").Width(70);
                            column.Bound(s => s.EmployeeID).ClientTemplate("<a href=\"#\" onclick=\"return SaveAssetAssign('<#=ItemCode#>', '<#=EmployeeID#>');\" >Save</a>").Title("").Width(50);
                        })
                        .DataBinding(settings => settings.Ajax().Select("__FixedAssetAssignToEmployee", "InventoryManagement"))
                        .ClientEvents(events =>
                        {
                            events.OnDataBinding("onDataBindingAssignAsset");
                            events.OnError("onErrorAssignAsset");
                            events.OnRowDataBound("onRowDataBoundAssignAsset");
                        })
                        .Scrollable(scroll => scroll.Height(200))
                        .Selectable()
                        .Footer(false)
             )
                    </td>
                </tr>
            </table>
        </td>
    </tr>
</table>
<script type="text/javascript">

    $('#availableSerialAndAssignSerialList').css("display", "none");
    $('#assetAssignUnassignToEmployee').css("display", "none");
    $('#mapingSerialsForAssignAsset').css("display", "none");

    function onRowDataBoundAssignAsset(e) {

        if ($('#hfIsItASerializableItem').val() == "true") {

            var row = e.row;
            var dataItem = e.dataItem;

            row.cells[5].innerHTML = [
            "<a href=\"#\" onclick=\"return MapSerialForAssignAsset('" + dataItem.ItemCode + "', '" + dataItem.EmployeeID + "');\" >Map Serial</a>"
            ].join("");
        }

    }

    $(document).ready(function () {

        $('#ddlAssignAseetSerials').change(function () {
            AddToSerialTable();
        });

        $('#serialGrid').delegate("a.deleteSerialBtn", "click", function () {
            $(this).parent().parent().fadeOut("slow").remove();

            var totalSerial = parseInt($('#txtTotalSerialQuantity').val());
            totalSerial = totalSerial - 1;
            $('#txtTotalSerialQuantity').val(totalSerial);

            return false;
        });

    });

    function ShowItemList() {

        $('#availableSerialAndAssignSerialList').css("display", "none");
        $('#assetAssignUnassignToEmployee').css("display", "none");
        $('#mapingSerialsForAssignAsset').css("display", "none");

        var params = {
            categoryId: $("#ddlItemCategory").val(),
            storeLocation: $("#ddlStoreLocation").val(),
            employeeId: $("#ddlEmployee").val()
        };

        var grid = $("#gvLocationWiseAsset").data("tGrid");
        grid.dataSource._data = [];
        grid.ajaxRequest(params);

        return false;

    }

    function GetAssignedAndTotalSerial(itemCode, option) {

        $('#availableSerialAndAssignSerialList').css("display", "");
        $('#assetAssignUnassignToEmployee').css("display", "none");
        $('#mapingSerialsForAssignAsset').css("display", "none");
        $('#hfItemCode').val(itemCode);
        var params = {
            storeLocation: $("#ddlStoreLocation").val(),
            itemCode: itemCode,
            employeeId: $("#ddlEmployee").val(),
            option: option
        };

        var grid = $("#gvFixedAssetSerialList").data("tGrid");
        grid.dataSource._data = [];
        grid.ajaxRequest(params);

        return false;
    }

    function AssignAssetToEmployee(itemCode, isItASerializableItem, unAssignedQuantity) {

        $('#hfIsItASerializableItem').val(isItASerializableItem);
        $('#hfItemCode').val(itemCode);

        $('#availableSerialAndAssignSerialList').css("display", "none");
        $('#assetAssignUnassignToEmployee').css("display", "");
        $('#mapingSerialsForAssignAsset').css("display", "none");

        var params = {
            storeLocation: $("#ddlStoreLocation").val(),
            itemCode: itemCode,
            employeeId: $('#ddlEmployee').val(),
            unAssignedQuantity: unAssignedQuantity
        };

        var grid = $("#gvFixedAssetAssignToEmployee").data("tGrid");
        grid.dataSource._data = [];
        grid.ajaxRequest(params);

        return false;
    }

    function UnAssignAssetToEmployee(employeeID, itemSerialNo, allocationSeqNo, itemCode) {

        var itemCode = $('#hfItemCode').val();
        var storeLocation = $('#ddlStoreLocation').val();
        var tr = $('#gvLocationWiseAsset tbody tr').find("td:eq(0):contains('" + itemCode + "')").parent();
        var totalSerialInStock = tr.find("td:eq(7)").text();

        if (!confirm("Are you sure to unassigned?")) {
            return false;
        }

        $.ajax({
            type: "POST",
            url: '@Url.Action("UnAssignAssetToEmployee", "InventoryManagement")',
            data: { employeeID: employeeID, itemSerialNo: itemSerialNo, allocationSeqNo: allocationSeqNo, storeLocation: storeLocation, itemCode: itemCode, totalSerialInStock: totalSerialInStock },
            cache: false,
            success: function (data) {

                if (data[0].messageCode = "success") {
                    alert(data[0].message);
                    GetAssignedAndTotalSerial(itemCode, '');
                    ShowItemList();
                }
                else {
                    alert(data[0].message);
                }
            },
            error: function () {
                alert("Connection Failed. Please Try Again");
            }

        });
    }

    function CheckAssignQuantity(assignQuantity, employeeId) {

        $('#ddlAssignAseetSerials').get(0).options.length = 0;
        $('#txtTotalSerialQuantity').val("");
        $("#serialGrid tbody").html('');

        if (Helper.IsNumeric(assignQuantity) == false) {
            alert("Assign Quantity Cannot Be Character");
            $('#assignQuantity' + employeeId).val("");
            return false;
        }
        //gvFixedAssetAssignToEmployee
        var assignAssetGridTr = $("#gvFixedAssetAssignToEmployee tbody tr:contains('" + employeeId + "')");
       

        var availableQuantity = assignAssetGridTr.find("td:eq(1)").text();
        var alreadyAssignQuantity = assignAssetGridTr.find("td:eq(2)").text();
        var inUseAlreadyAssignQuantity = assignAssetGridTr.find("td:eq(3)").text();
        //var allocationQuantityNow = assignAssetGridTr.find("td:eq(4)").text();
       
        if ((Helper.IsNumeric(assignQuantity) == true) && ((parseInt(inUseAlreadyAssignQuantity, 10) >= 1) || (parseInt(inUseAlreadyAssignQuantity, 10) == 0))) {
        
            if (parseInt(inUseAlreadyAssignQuantity) >= 1) {
                alert("Quantity Already Assign");
                $('#assignQuantity' + employeeId).val("");
                return false;
            }
            if (assignQuantity != 1)
            {
                alert("Assign Quantity must be 1");
                $('#assignQuantity' + employeeId).val("");
                return false;
            }
           
        }


        if (parseInt(assignQuantity, 10) > parseInt(availableQuantity, 10)) {
            alert("Assign Quantity Cannot Be Greater Than Available Quantity");
            $('#assignQuantity' + employeeId).val("");
            return false;
        }

        if (parseInt(assignQuantity, 10) < 0) {
            if ((parseInt(assignQuantity, 10) * -1) > parseInt(alreadyAssignQuantity, 10)) {
                alert("Unassign Quantity Cannot Be Less Than Already Assign Quantity");
                $('#assignQuantity' + employeeId).val("");
                return false;
            }
        }
    }

    function MapSerialForAssignAsset(itemCode, employeeId) {

        if ($('#assignQuantity' + employeeId).val() == "") {
            alert("Please Give Assign/Unassign Quantity");
            return false;
        }

        $('#mapingSerialsForAssignAsset').css("display", "");
        $('#hfItemCode').val(itemCode);
        $('#hfEmployeeId').val(employeeId);

        $.ajax({

            type: "POST",
            url: '@Url.Action("MapSerialForAssignAssetList", "InventoryManagement")',
            data: { storeLocation: $('#ddlStoreLocation').val(), itemCode: itemCode, employeeId: employeeId, assignQuantity: $('#assignQuantity' + employeeId).val() },
            cache: false,
            success: function (data) {

                $('#ddlAssignAseetSerials').get(0).options.length = 0;
                $('#ddlAssignAseetSerials').get(0).options[0] = new Option("--Select--", "");

                $.map(data, function (item) {
                    $('#ddlAssignAseetSerials').get(0).options[$('#ddlAssignAseetSerials').get(0).options.length] = new Option(item.Display, item.Value);
                });
            },
            error: function () {
                alert("Connection Failed. Please Try Again"); 
            }

        });
        // ClearAllControl();
        //$("#serialGrid tbody").text("");

    }

    function SaveAssetAssign(itemCode, employeeId) {

        var assignQuantity = $('#assignQuantity' + employeeId).val();
        var remarks = $('#assignRemarks' + employeeId).val();
        var storeLocation = $("#ddlStoreLocation").val();
        var serialItems = "";

        if ($('#hfIsItASerializableItem').val() == "true") {

            var serialGridLength = $('#serialGrid tbody tr').length;

            if (serialGridLength == 0) {
                alert("Please Map Serial");
                return false;
            }
            else if (assignQuantity > serialGridLength) {
                alert("Serial Quantity Cannot Be Greater Than Assign Quantity");
                return false;
            }
            else if ((parseInt(assignQuantity, 10) * -1) > serialGridLength) {
                alert("Serial Quantity Cannot Be Less Than Assign Quantity");
                return false;
            }
        }

        $('#serialGrid tbody tr').each(function () {

            if (serialItems != "") {
                serialItems = serialItems + "#" + $(this).find("td:eq(0)").text();
            }
            else {
                serialItems = serialItems + $(this).find("td:eq(0)").text();
            }

        });

        $.ajax({
            type: "POST",
            url: '@Url.Action("SaveAssetAssign", "InventoryManagement")',
            data: { employeeId: employeeId, itemCode: itemCode, storeLocation: storeLocation, allocatedQuantity: assignQuantity, remarks: remarks, serialItems: serialItems },
            cache: false,
            success: function (data) {
                if (data[0].messageCode == "success") {
                    alert(data[0].message);
                    ClearAllControl();
                    ShowItemList();
                }
                else {
                    alert(data[0].message);
                }
            },
            error: function () {
                alert("Server Error. Please Try Again");
            }
        });
    }

    function AddToSerialTable() {

        if ($('#ddlAssignAseetSerials').val() == "") {
            return false;
        }

        var itemCode = $('#hfItemCode').val();
        var employeeId = $('#hfEmployeeId').val();

        var assignAssetGridTr = $("#gvFixedAssetAssignToEmployee tbody tr:contains('" + employeeId + "')");
        var assignQuantity = assignAssetGridTr.find("td:eq(3)").find('input').val();
        var alreadyAssignQuantity = assignAssetGridTr.find("td:eq(2)").text();
        var availableQuantity = assignAssetGridTr.find("td:eq(1)").text();

        if (assignQuantity == "") {
            alert("Please Give Assign Quantity");
            return false;
        }

        var duplicateSerials = "0";
        var totalSerialQuantity = 1;
        var alreadyScanQuantity = $('#txtTotalSerialQuantity').val();

        $('#serialGrid tbody tr').each(function () {
            var texto = $(this).find('td:eq(0)').text();

            if ($('#ddlAssignAseetSerials').val() == texto) {
                duplicateSerials = texto;
            }
            if ($(this).index() != 0)
                totalSerialQuantity = $(this).index() + 2;
            else
                totalSerialQuantity = 2;
        });

        if (duplicateSerials != "0") {
            $('#serialMessage').text("Duplicate Serial Not Allowed");
            $('#ddlAssignAseetSerials').val("");
            return false;
        }

        if (parseInt(assignQuantity, 10) < 0) {
            if (parseInt(totalSerialQuantity, 10) > parseInt(alreadyAssignQuantity, 10)) {
                $('#serialMessage').text("Unassign Quantity Cannot Be Less Than Already Assign Quantity");
                $('#ddlAssignAseetSerials').val("");
                return false;
            }
        }

        if (parseInt(assignQuantity, 10) > 0) {
            if (parseInt(totalSerialQuantity, 10) > parseInt(assignQuantity, 10)) {
                $('#serialMessage').text("Serial Quantity Cannot Be Greater Than Assign Quantity");
                $('#ddlAssignAseetSerials').val("");
                return false;
            }
        }

        $('#txtTotalSerialQuantity').val(totalSerialQuantity);

        //        var serialCollectionGridLength = $("#SerialCollectionGrid tbody tr:contains(\"" + employeeId + "\")").length;

        //        if (serialCollectionGridLength > parseInt(assignQuantity, 10)) {
        //            alert("Already MAP Serial For This Employee (" + employeeId + "). Please Edit Those Serials");
        //            return false;
        //        }

        var trNew = "";

        if (totalSerialQuantity % 2 == 0)
            trNew = "<tr class=\"t-alt\"> <td>" + $('#ddlAssignAseetSerials').val() + "</td>";
        else
            trNew = "<tr> <td>" + $('#ddlAssignAseetSerials').val() + "</td>";

        trNew = trNew + "<td>&nbsp;</td>"; // damage

        trNew = trNew + "<td align=\"center\"> <a href=\"#\" id=\"" + $('#ddlAssignAseetSerials').val() + "\" class=\"deleteSerialBtn\" >Delete</a> </td> </tr>";

        $('#serialGrid tbody').append(trNew);

        $('#ddlAssignAseetSerials').val("");
        $('#serialMessage').text("");
    }

    function ClearAllControl() {

        AssignAssetToEmployee($("#hfItemCode").val(), $("#hfIsItASerializableItem").val(),'');

        $('#ddlAssignAseetSerials').get(0).options.length = 0;
        $('#txtTotalSerialQuantity').val("");
        $("#serialGrid tbody").text("");
        $("#hfItemCode").val("");
        //$("#hfIsItASerializableItem").val("");
    }

    function RSFMenu(goFor) {
        window.location.replace(Helper.Menu("../../", goFor));
        return false;
    } 
</script>
