@using RASolarERP.Model;
@using model = RASolarERP.Areas.Sales.Models;
@{
    ViewBag.Title = "Sales Audit Adjustment";
    
    
    Layout = "~/Areas/Sales/Views/Shared/_SalesLayout.cshtml";

    if (false)
    {
    <script src="../../../../Scripts/jquery-1.5.1.min.js" type="text/javascript"></script>
    <script src="../../../../Scripts/RASolarCustomFunction.js" type="text/javascript"></script>    
    }
}
@section TopMenu
{
    @Html.Partial((String)ViewBag.TopMenu)
}
@section LoginInfo
{
    <table cellpadding="0" cellspacing="0" border="0" style="text-align: right;" width="100%">
        <tr>
            <td style="width: 20%" align="left">
                @ViewBag.LocationTitle&nbsp; @ViewBag.Location
            </td>
            <td style="width: 20%" align="left">
                @ViewBag.ZoneTitle&nbsp; @ViewBag.ZoneName
            </td>
            <td style="width: 20%" align="left">
                @ViewBag.RegionTitle&nbsp; @ViewBag.RegionName
            </td>
            <td style="width: 40%" align="left">
                @ViewBag.UnitTitle&nbsp; @ViewBag.UnitName
            </td>
        </tr>
    </table>
}
@{
    List<Aud_AdjustmentReasonCodes> salesAuditReasons = new List<Aud_AdjustmentReasonCodes>();
    salesAuditReasons = (List<Aud_AdjustmentReasonCodes>)TempData["SalesAuditReason"];
}
<table cellpadding="0" cellspacing="0" border="0" width="100%">
    <tr>
        <td>
            <table cellpadding="0" cellspacing="0" border="0" width="100%">
                <tr>
                    @using (Html.BeginForm("SalesAuditAdjsutment", "SalesAudit", FormMethod.Post))
                    { 
                        <td style="width: 12%;">
                            Customer Status
                        </td>
                        <td style="width: 25%;">
                            @Html.DropDownList("ddlCustomerStatus", new SelectList(@ViewBag.CustomerStatus, "StatusID", "Description", TempData["selectValue"]))
                        </td>
                        <td style="width: 40%;">
                            <input type="submit" value="Search" id="btnSearch" />
                        </td>
                    }
                    <td style="width: 23%;">
                        <a href="@Url.Action("SalesAuditAdjsutment", "SalesAudit")" style="font-size:15px; color:#7EBF39; font-weight:bold;">
                            Refresh Page</a>
                    </td>
                </tr>
            </table>
        </td>
    </tr>
    <tr>
        <td class="HorizontalDivider">
        </td>
    </tr>
    <tr>
        <td>
            <table cellpadding="0" cellspacing="0" border="0" width="100%">
                <tr>
                    <td style="width: 25%" align="left">
                        Audit Start Date:&nbsp;&nbsp;@ViewBag.AuditStartDate
                    </td>
                    <td style="width: 75%" align="left">
                        Audit Code:&nbsp;&nbsp;@ViewBag.AuditCode
                    </td>
                </tr>
            </table>
        </td>
    </tr>
    <tr>
        <td class="HorizontalDivider">
        </td>
    </tr>
    <tr>
        <td>
            <div class="DataGridXScroll">
                @{
                    List<GetCustomerListWithRecoveryStatus> listCustomerStatus = new List<GetCustomerListWithRecoveryStatus>();
                    listCustomerStatus = (List<GetCustomerListWithRecoveryStatus>)TempData["CStatus"];


                    if (listCustomerStatus != null)
                    {                    

                    @(Html.Telerik().Grid(listCustomerStatus)
            .Name("grvSalesAdjustment")
            .DataKeys(keys => keys.Add(k => k.CustCode))
            .Columns(column =>
            {
                column.Bound(a => a.CustCode).Width(100).HtmlAttributes(new { @class = "GridColumnLeftAlign" }).Title("Customer ID");
                column.Bound(a => a.CustName).Width(150).HtmlAttributes(new { @class = "GridColumnLeftAlign" }).Title("Cutomer Name");
                column.Bound(a => a.AgreementDate).Width(100).Format("{0:dd-MMM-yy}").HtmlAttributes(new { @class = "GridColumnLeftAlign" }).Title("Agreement Date");
                column.Bound(a => a.PackagePrice).Width(100).HtmlAttributes(new { @class = "GridColumnRightAlign" }).Title("Package Price");
                column.Bound(a => a.DPAmountCollected).Width(100).HtmlAttributes(new { @class = "GridColumnRightAlign" }).Title("Collected DP Amount").Format("{0:0}");
                column.Bound(a => a.TotalLoanAmount).Width(100).HtmlAttributes(new { @class = "GridColumnRightAlign" }).Title("Loan Amount");
                column.Bound(a => a.ServiceChargeAmount).Width(100).HtmlAttributes(new { @class = "GridColumnRightAlign" }).Title("Service Charge");
                column.Bound(a => a.ARWithServiceChargeAmount).Width(100).HtmlAttributes(new { @class = "GridColumnRightAlign" }).Title("Total Receivable");
                column.Bound(a => a.TotalNoOfInstallment).Width(100).HtmlAttributes(new { @class = "GridColumnRightAlign" }).Title("Loan Period");
                column.Bound(a => a.InstallmentSizeWithSrvChrg).Width(100).HtmlAttributes(new { @class = "GridColumnRightAlign" }).Title("Installment Size");
                column.Bound(a => a.DueNoOfInstlmentUpToCurrentMonth).Width(100).HtmlAttributes(new { @class = "GridColumnRightAlign" }).Title("Number of Instlment Passed Up To Current Month");
                column.Bound(a => a.ReceivableUpToCurrentMonth).Width(100).HtmlAttributes(new { @class = "GridColumnRightAlign" }).Title("Receivable Up To Current Month");
                column.Bound(a => a.TotalRecoveredUpToLastMonthWithoutDP).Width(100).HtmlAttributes(new { @class = "GridColumnRightAlign" }).Title((string)TempData["recoveredUpToWithoutDP"]).Format("{0:0}"); //31 may
                column.Bound(a => a.CollectionInCurrentMonthWithoutDP).Width(100).HtmlAttributes(new { @class = "GridColumnRightAlign" }).Title("Current Month Installment Amount").Format("{0:0}"); //current month 
                column.Bound(a => a.OverdueAmount).Width(100).HtmlAttributes(new { @class = "GridColumnRightAlign" }).Hidden((bool)@TempData["DisplayOrNot"]);
                column.Bound(a => a.OutstandingBalance).Width(100).HtmlAttributes(new { @class = "GridColumnRightAlign" }).Hidden((bool)@TempData["DisplayOrNot"]);
                column.Bound(a => a.AdvanceAmount).Width(100).HtmlAttributes(new { @class = "GridColumnRightAlign" }).Hidden((bool)@TempData["DisplayOrNot"]);
                column.Bound(a => a.CustCode).Title("Customer ID").Width(100).HtmlAttributes(new { @class = "GridColumnLeftAlign" });

                column.Template(@<input type="text" class="GridTextBoxRightAlign" style="width:62px;" id="@("salesAudit" + @item.CustCode.Replace(" ", "").Replace("-", "").Trim())" value="@(@item.AuditAdjustmentWithoutDPInCurrentMonth.ToString("0"))" />).Title("Audit Adjustment").Width(80);

                column.Template(@<select id="@("ddlSalesAuditReason" + @item.CustCode.Replace(" ", "").Replace("-", "").Trim())" class="DropDown">
                    <option value="0">--Select--</option>
                   @* @foreach (AdjustmentReasonCodes adrc in salesAuditReasons)
                    {
                        if (item.RefReasonForAuditAdjustment == adrc.ReasonCode)
                        { 
                        <option value="@(adrc.ReasonCode)" selected="selected">@adrc.ReasonDescription</option> 
                        }
                        else
                        {                        
                        <option value="@(adrc.ReasonCode)">@adrc.ReasonDescription</option>
                        }
                    }*@
                </select>).Title("Audit Reason").Width(135);

                column.Template(@<input type="text" style="width:90px;" id="@("salesAuditRemarks" + @item.CustCode.Replace(" ", "").Replace("-", "").Trim())" value="@(@item.Remarks)" />).Width(105).Title("Remarks");

                column.Template(@<a href="#" onclick="return SalesAdjustmentSave('@item.CustCode', '@ViewBag.AuditFinishedDate');">Save</a>).Width(50);
                column.Bound(a => a.RefReasonForAuditAdjustment).Width(100).Hidden(true);

            }).Selectable()
            .Pageable(page => page.PageSize(100))
            .Scrollable(scroll => scroll.Height(300))


                     )
                    }   
                }
                <table border="0" cellpadding="0" cellspacing="0" style="padding-top: 10px;">
                    <tr>
                        <td style="width: 25%" align="left">
                            Audit Finish Date:&nbsp;&nbsp; @ViewBag.AuditFinishedDate
                        </td>
                        <td colspan="3" style="width: 75%" align="right">
                            <input type="submit" id="btnFinishedAudit" onclick="return FinishedAudit();" value="Finish Audit Report" />
                        </td>
                    </tr>
                </table>
            </div>
        </td>
    </tr>
</table>
<script type="text/javascript">

    function SalesAdjustmentSave(customerCode, auditFinishedDate) {

        if (auditFinishedDate != "") {
            alert("After Finish Audit, Cannot Save anyting.");
            return false;
        }

        var salesAdjustmentValue = 0;
        var remarks = "";
        var auditReason = "0";

        var cId = Helper.CustomerIdWithoutHiPen(customerCode);

        auditReason = $('#ddlSalesAuditReason' + cId).val();

        if ($('#salesAudit' + cId).val() != "") {
            if (parseInt($('#salesAudit' + cId).val()) != 0) {

                if (auditReason == "0") {
                    alert("Please Select Audit Reason");
                    return false;
                }
            }
        }

        if ($('#salesAudit' + cId).val() == "") {

            if (auditReason != "0") {
                alert("Please Give Audit Value");
                 return false;
            }
        }
        else if (parseInt($('#salesAudit' + cId).val()) == 0) {
            if (auditReason != "0") {
                alert("Please Give Audit Value");
                return false;
            }
        }
        else {
            auditReason = $('#ddlSalesAuditReason' + cId).val();
        }

        if ($('#salesAudit' + cId).val() != "") {
            salesAdjustmentValue = $('#salesAudit' + cId).val();
        }

        if ($('#salesAuditRemarks' + cId).val() != "") {
            remarks = $('#salesAuditRemarks' + cId).val();
        }

        SalesAdjustmentSaveAjax(customerCode, salesAdjustmentValue, auditReason, remarks);

        return false;
    }

    function SalesAdjustmentSaveAjax(customerCode, salesAdjustmentValue, auditReason, remarks) {

        $.ajax({
            type: "POST",
            url: '@Url.Action("SalesAuditAdjsutmentSave", "SalesAudit")',
            data: "{'customerCode':'" + customerCode + "','salesAdjustmentValue':'" + salesAdjustmentValue + "','auditReason':'" + auditReason + "','remarks':'" + remarks + "'}",
            contentType: "application/json; charset=utf-8",
            dataType: 'json',
            cache: false,
            success: function (data) {
                alert(data.toString());
            },
            error: function () {
                alert("Connection Is Not Avaiable. Try Later.");
            }
        });
    }

    function FinishedAudit() {
        
         var auditCode = @(Html.Raw(Json.Encode(ViewBag.AuditCode)));
         var success = false;

         if(auditCode == "")
         {
            alert("Cannot Finish Before Audit.");
            return false;
         }

         var result = confirm("Do you want to Save?")
                if (result) {
                   
                }
                else {
                    return false;
                }

        $.ajax({
            type: "POST",
            url: '@Url.Action("FinishedAuditAdjustment", "SalesAudit")',
            contentType: "application/json; charset=utf-8",
            dataType: 'json',
            cache: false,
            success: function (data) {

                if (data == "succeedSave") {
                    alert("Save is Succeed.");   
                     url = "./SalesAuditAdjsutment";
                     window.location.replace(url);
                }
                else if (data == "failed")
                { alert("Save is not Succeed."); }
                else if (data == "noEntry")
                { alert("You don't Finished Before Audit Adjustment."); }
                else if (data == "alreadyFinished")
                { alert("Cannot Finished Again."); }
            },
            error: function () {
                alert("Connection Is Not Avaiable. Try Later.");
            }
        });


        if(success == true)
        {
        alert("Ok");
            url = "SalesAudit/SalesAuditAdjsutment";
            window.location.replace(url);
        }

        return false;
    }

     function RSFMenu(goFor) {
        window.location.replace(Helper.Menu("../../", goFor));
        return false;
    }  
      

    $(document).ready(function(){
    
        $('.DropDown').mouseenter(function () {
          $(this).css("width","auto");
        });

        $('.DropDown').mouseleave(function () {
          $(this).css("width","200px");
        });
    });

</script>
