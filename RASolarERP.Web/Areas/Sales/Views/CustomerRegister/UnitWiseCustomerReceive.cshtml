@using RASolarERP.Model;
@{
    ViewBag.Title = "Accept Transferred Customer";
    Layout = "~/Areas/Sales/Views/Shared/_SalesLayout.cshtml";

    if (false)
    {
    <script src="../../../../Scripts/jquery-1.7.1.min.js" type="text/javascript"></script>
    <script src="../../../../Scripts/RASolarCustomFunction.js" type="text/javascript"></script>      
    }
}
@section TopMenu
{
    @Html.Partial((String)ViewBag.TopMenu)
}
@section LoginInfo
{
    <table cellpadding="0" cellspacing="0" border="0" style="text-align: right;" width="100%">
        <tr>
            <td style="width: 20%" align="left">
                @ViewBag.ZoneTitle&nbsp; @ViewBag.ZoneName
            </td>
            <td style="width: 20%" align="left">
                @ViewBag.RegionTitle&nbsp; @ViewBag.RegionName
            </td>
            <td style="width: 20%" align="left">
                @ViewBag.UnitTitle&nbsp; @ViewBag.UnitName
            </td>
            <td style="width: 40%" align="left">
                @ViewBag.OpenMonthYear
            </td>
        </tr>
    </table>
}
<input id="hfCurrentDay" type="hidden"  value="@ViewBag.CurrentDay"/>
@{
    List<GetCustomerTransferredButNotYetAccepted> lstCustomerTransferredButNotYetAccepted = new List<GetCustomerTransferredButNotYetAccepted>();
    lstCustomerTransferredButNotYetAccepted = (List<GetCustomerTransferredButNotYetAccepted>)TempData["CustomerTransferredButNotYetAccepted"];   
}
<table cellpadding="0" cellspacing="0" border="0">
    <tr>
        <td>
            <div class="DataGridXScroll">
                @(Html.Telerik().Grid(lstCustomerTransferredButNotYetAccepted)
                                      .Name("gvUnitWiseCustomerReceive")
                                      .DataKeys(keys => keys.Add(k => k.CustomerCode))
                                      .Columns(column =>
                                      {
                                          column.Bound(c => c.CustomerCode).Title("Customer ID");
                                          column.Bound(c => c.CustomerName).Width(150);
                                          column.Bound(c => c.AgreementDate).Format("{0:dd-MMM-yyyy}");
                                          column.Bound(c => c.OverdueOrAdvanceBalance).HtmlAttributes(new { @class = "A. GridColumnRightAlign" }).Format("{0:0}").Title("Overdue or Advance");
                                          column.Bound(c => c.OutstandingBalance).HtmlAttributes(new { @class = "A. GridColumnRightAlign" }).Format("{0:0}");
                                          column.Bound(c => c.TransferFromUnit).Title("Transfer From Unit");
                                          column.Bound(c => c.NoteForTransfer).Title("Note for Transfer").Width(250);
                                          column.Template(@<a href="#" onclick="return CustomerAccept('@item.CustomerCode')">Accept</a>);
                                          column.Template(@<a href="#" onclick="return CustomerReject('@item.CustomerCode')">Not-Accept</a>);
                                      })
                                      .Selectable()
                                      .Pageable(pages => pages.PageSize(100))
                                      .Scrollable(scroll => scroll.Height(300))

                        )
            </div>
        </td>
    </tr>
    <tr>
        <td id="CustomerLedgerContainer" style="width: 100%">
        </td>
    </tr>
</table>
<script type="text/javascript">

    function CustomerAccept(customerID) {

        if (confirm("Do You Want To Accept The Customer?")) {

            var AcceptOrRejectDate = $('#hfCurrentDay').val();
            $.ajax({
                type: "POST",
                url: '@Url.Action("CustomerAccept", "CustomerRegister")',
                data: "{'customerID':'" + customerID + "','AcceptOrRejectDate':'" + AcceptOrRejectDate + "'}",
                contentType: "application/json; charset=utf-8",
                dataType: 'json',
                cache: false,
                success: function (data) {
                    alert(data[0].message);
                    var href = $('.t-refresh').attr('href');
                    window.location.href = href;
                },
                error: function () {
                    alert("Failed to load Item");
                }
            });
        }
    }

    function CustomerReject(customerID) {

        if (confirm("Do You Want To Reject The Customer?")) {

            var AcceptOrRejectDate = $('#hfCurrentDay').val();
            $.ajax({
                type: "POST",
                url: '@Url.Action("CustomerReject", "CustomerRegister")',
                data: "{'customerID':'" + customerID + "','AcceptOrRejectDate':'" + AcceptOrRejectDate + "'}",
                contentType: "application/json; charset=utf-8",
                dataType: 'json',
                cache: false,
                success: function (data) {
                    alert(data[0].message);
                    var href = $('.t-refresh').attr('href');
                    window.location.href = href;
                },
                error: function () {
                    alert("Failed to load Item");
                }
            });
        }
    }

    function RSFMenu(goFor) {
        window.location.replace(Helper.Menu("../../", goFor));
        return false;
    }
  
</script>
