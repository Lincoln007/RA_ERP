<script type="text/javascript">
    var firstTime = true;
    function onDataBinding(e) {
        if (firstTime) {
            e.preventDefault();
            firstTime = false;
        }
        else {
            e.data = {
                fromDate: $('#txtFromDate').val(),
                toDate: $('#txtToDate').val()
            };
        }
    }

    function onError(e) {
        e.preventDefault();
    }

</script>

@model IEnumerable<RASolarERP.DomainModel.SalesModel.UnitWiseCashMemoInformation>
@{
    ViewBag.Title = "Cash Memo Information";
    Layout = "~/Areas/Sales/Views/Shared/_SalesLayout.cshtml";

    if (false)
    {
    <script src="../../../../Scripts/jquery-1.7.1.min.js" type="text/javascript"></script>
    <script src="../../../../Scripts/RASolarCustomFunction.js" type="text/javascript"></script>      
    }
}
@section TopMenu
{
    @Html.Partial((String)ViewBag.TopMenu)
}
@section LoginInfo
{
    <table cellpadding="0" cellspacing="0" border="0" style="text-align: right;" width="100%">
        <tr>
            <td style="width: 20%" align="left">
                @ViewBag.ZoneTitle&nbsp; @ViewBag.ZoneName
            </td>
            <td style="width: 20%" align="left">
                @ViewBag.RegionTitle&nbsp; @ViewBag.RegionName
            </td>
            <td style="width: 20%" align="left">
                @ViewBag.UnitTitle&nbsp; @ViewBag.UnitName
            </td>
            <td style="width: 40%" align="left">
                @ViewBag.OpenMonthYear
            </td>
        </tr>
    </table>
}
<input id="hfReportMode" type="hidden" name="hfReportMode" value="@ViewBag.ReportMode"/>
<table cellpadding="0" cellspacing="0" border="0" width="100%" id="reportMode">
    <tr>
        <td style="width: 33%;">
            <table cellpadding="0" cellspacing="0" border="0" width="100%">
                <tr>
                    <td align="left">From Date:
                    </td>
                    <td align="left">
                        @(Html.Telerik().DatePicker()
                             .Name("txtFromDate")
                             .Max(new DateTime(2999, 12, 31))
                             .Value(@ViewBag.fromDate)
                             .Format("dd-MMM-yyyy")
                            )
                    </td>
                </tr>
            </table>
        </td>
        <td style="width: 33%;">
            <table cellpadding="0" cellspacing="0" border="0" width="100%">
                <tr>
                    <td align="left">To Date:
                    </td>
                    <td align="left">
                        @(Html.Telerik().DatePicker()
                            .Name("txtToDate")
                            .Max(new DateTime(2999, 12, 31))
                            .Value(@ViewBag.toDate)
                            .Format("dd-MMM-yyyy")
                            )
                    </td>
                </tr>
            </table>
        </td>
        <td style="width: 33%;">
            <table cellpadding="0" cellspacing="0" border="0" width="100%">
                <tr>
                    <td align="left">
                        <input type="submit" value="Show Memo" id="btnCashMemoInformation" />
                    </td>
                </tr>
            </table>
        </td>
    </tr>
</table>
<div class="DataGridXScroll">
    @(Html.Telerik().Grid(Model)
    .Name("gvCashMemoInformation")
    .DataKeys(keys => keys.Add(k => k.CustomerCode))
    .Columns(column =>
    {
        column.Bound(c => c.TransDate).Title("Collection Date").Format("{0:dd-MMM-yyyy}").Width(120);
        column.Bound(c => c.CustomerCode).Title("Customer ID").Width(90);
        column.Bound(c => c.CustomerName).Width(180);
        column.Bound(c => c.CashMemoBookNo).Width(90);
        column.Bound(c => c.CashMemoNo).Width(90).HtmlAttributes(new { @class = "GridColumnRightAlign" });
        column.Bound(c => c.Amount).Format("{0:0}").HtmlAttributes(new { @class = "GridColumnRightAlign" }).Width(90);
        column.Bound(c => c.Particulars).Title("Collection Type").Width(250);
    })

       .DataBinding(dbBindings => dbBindings.Ajax().Select("_CashMemoInformationList", "CustomerRegister"))
       .ClientEvents(events =>
       {
           events.OnDataBinding("onDataBinding");
           events.OnError("onError");
       })
       .Scrollable(scroll => scroll.Height(300))
       .Pageable(pages => pages.PageSize(100))
       .Selectable()
        .ToolBar(commands =>
          {
              commands.Custom().HtmlAttributes(new { id = "exportCashMemoInformationToPdf", onclick = "return SetParamaterForPdfGenerationCashMemo();" }).Text("Export To PDF Cash Memo").Action("ExportToPdfCashMemo", "CustomerRegister", new { page = 1, groupby = "~", orderby = "~", filter = "~", fromDate = "~", toDate = "~",});
              commands.Custom().HtmlAttributes(new { id = "exportCashMemoInformationToCsv", onclick = "return SetParamaterForCsvGenerationCashMemo();" }).Text("Export To Excel Cash Memo").Action("ExportToCsvCashMemo", "CustomerRegister", new { page = 1, groupby = "~", orderby = "~", filter = "~", fromDate = "~", toDate = "~", });
          })
       .Footer(true)
       )
</div>

<script type="text/javascript">

    $('#btnCashMemoInformation').click(function () {

        var fromDate = $('#txtFromDate').val();
        var toDate = $('#txtToDate').val();

        if (fromDate == '') {
            alert("Please insert from date");
            return false;
        }
        else if (toDate == '') {
            alert("Please insert to date");
            return false;
        }

        var params = {
            fromDate: $('#txtFromDate').val(),
            toDate: $('#txtToDate').val()
        };

        var grid = $('#gvCashMemoInformation').data("tGrid");
        grid.rebind(params);

    });

    function SetParamaterForPdfGenerationCashMemo()
    {
        var fromDate = $('#txtFromDate').val();
        var toDate = $('#txtToDate').val();

        var grid = $("#gvCashMemoInformation").data("tGrid");
        var $exportToPdf = $('#exportCashMemoInformationToPdf');
        var href = $exportToPdf.attr("href");

        href = href.replace(/page=([^&]*)/, 'page=' + grid.currentPage);
        href = href.replace(/groupby=([^&]*)/, 'groupby=' + (grid.groupBy || '~'));
        href = href.replace(/orderby=([^&]*)/, 'orderby=' + (grid.orderBy || '~'));
        href = href.replace(/filter=([^&]*)/, 'filter=' + (grid.filterBy || '~'));
        href = href.replace(/fromDate=([^&]*)/, 'fromDate=' + (fromDate || '~'));
        href = href.replace(/toDate=([^&]*)/, 'toDate=' + (toDate || '~'));

        $exportToPdf.attr("href", href);

        return true;

    }

    function SetParamaterForCsvGenerationCashMemo()
    {
        var fromDate = $('#txtFromDate').val();
        var toDate = $('#txtToDate').val();

        var grid = $("#gvCashMemoInformation").data("tGrid");
        var $exportToCsv = $('#exportCashMemoInformationToCsv');
        var href = $exportToCsv.attr("href");

        href = href.replace(/page=([^&]*)/, 'page=' + grid.currentPage);
        href = href.replace(/groupby=([^&]*)/, 'groupby=' + (grid.groupBy || '~'));
        href = href.replace(/orderby=([^&]*)/, 'orderby=' + (grid.orderBy || '~'));
        href = href.replace(/filter=([^&]*)/, 'filter=' + (grid.filterBy || '~'));
        href = href.replace(/fromDate=([^&]*)/, 'fromDate=' + (fromDate || '~'));
        href = href.replace(/toDate=([^&]*)/, 'toDate=' + (toDate || '~'));

        $exportToCsv.attr("href", href);

        return true;
    }


    function RSFMenu(goFor) {
        window.location.replace(Helper.Menu("../../", goFor));
        return false;
    }
</script>
